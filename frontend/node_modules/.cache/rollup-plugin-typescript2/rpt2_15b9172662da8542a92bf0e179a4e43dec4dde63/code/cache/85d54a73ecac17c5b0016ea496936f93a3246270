{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { navigate } from 'custom-card-helpers';\r\nimport { prettyPrint, handleError, sortAlphabetically, pick } from '../../helpers';\r\nimport './user-editor-card.ts';\r\nimport '../../components/settings-row.ts';\r\nimport '../../components/alarmo-table.ts';\r\nimport { commonStyle } from '../../styles';\r\nimport { localize } from '../../../localize/localize';\r\nimport { SubscribeMixin } from '../../subscribe-mixin';\r\nimport { fetchConfig, fetchUsers, saveConfig, saveUser } from '../../data/websockets';\r\nimport { exportPath } from '../../common/navigation';\r\nlet AlarmViewCodes = class AlarmViewCodes extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.users = {};\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'alarmo_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        var _a;\r\n        if (!this.hass) {\r\n            return;\r\n        }\r\n        ((_a = this.data) === null || _a === void 0 ? void 0 : _a.code_format) == 'text';\r\n        const config = await fetchConfig(this.hass);\r\n        this.data = pick(config, ['code_arm_required', 'code_disarm_required', 'code_format']);\r\n        const users = await fetchUsers(this.hass);\r\n        this.users = users;\r\n    }\r\n    render() {\r\n        if (!this.hass || !this.data)\r\n            return html ``;\r\n        if (this.path.subpage == 'new_user') {\r\n            return html `\r\n        <user-editor-card .hass=${this.hass} .narrow=${this.narrow}></user-editor-card>\r\n      `;\r\n        }\r\n        else if (this.path.params.edit_user) {\r\n            return html `\r\n        <user-editor-card\r\n          .hass=${this.hass}\r\n          .narrow=${this.narrow}\r\n          item=${this.path.params.edit_user}\r\n        ></user-editor-card>\r\n      `;\r\n        }\r\n        else {\r\n            return html `\r\n        <ha-card header=\"${localize('panels.codes.title', this.hass.language)}\">\r\n          <div class=\"card-content\">${localize('panels.codes.cards.codes.description', this.hass.language)}</div>\r\n\r\n          <settings-row .narrow=${this.narrow}>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.codes.cards.codes.fields.code_arm_required.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.codes.cards.codes.fields.code_arm_required.description', this.hass.language)}\r\n            </span>\r\n            <ha-switch\r\n              ?checked=${this.data.code_arm_required}\r\n              @change=${(ev) => {\r\n                this.saveData({ code_arm_required: ev.target.checked });\r\n            }}\r\n            ></ha-switch>\r\n          </settings-row>\r\n\r\n          <settings-row .narrow=${this.narrow}>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.codes.cards.codes.fields.code_disarm_required.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.codes.cards.codes.fields.code_disarm_required.description', this.hass.language)}\r\n            </span>\r\n            <ha-switch\r\n              ?checked=${this.data.code_disarm_required}\r\n              @change=${(ev) => {\r\n                this.saveData({ code_disarm_required: ev.target.checked });\r\n            }}\r\n            ></ha-switch>\r\n          </settings-row>\r\n\r\n          <settings-row .narrow=${this.narrow}>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.codes.cards.codes.fields.code_format.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.codes.cards.codes.fields.code_format.description', this.hass.language)}\r\n            </span>\r\n            <mwc-button\r\n              class=\"${this.data.code_format == 'number' ? 'active' : 'disabled'} ${!this.data.code_arm_required &&\r\n                !this.data.code_disarm_required\r\n                ? 'disabled'\r\n                : ''}\"\r\n              @click=${() => {\r\n                this.saveData({ code_format: 'number' });\r\n            }}\r\n              ?disabled=${!this.data.code_arm_required && !this.data.code_disarm_required}\r\n            >\r\n              ${localize('panels.codes.cards.codes.fields.code_format.code_format_number', this.hass.language)}\r\n            </mwc-button>\r\n            <mwc-button\r\n              class=\"${this.data.code_format == 'text' ? 'active' : 'disabled'} ${!this.data.code_arm_required &&\r\n                !this.data.code_disarm_required\r\n                ? 'disabled'\r\n                : ''}\"\r\n              @click=${() => {\r\n                this.saveData({ code_format: 'text' });\r\n            }}\r\n              ?disabled=${!this.data.code_arm_required && !this.data.code_disarm_required}\r\n            >\r\n              ${localize('panels.codes.cards.codes.fields.code_format.code_format_text', this.hass.language)}\r\n            </mwc-button>\r\n          </settings-row>\r\n        </ha-card>\r\n\r\n        ${this.usersPanel()}\r\n      `;\r\n        }\r\n    }\r\n    usersPanel() {\r\n        if (!this.hass)\r\n            return html ``;\r\n        const users = Object.values(this.users);\r\n        users.sort(sortAlphabetically);\r\n        const columns = {\r\n            icon: {\r\n                width: '40px',\r\n            },\r\n            name: {\r\n                title: this.hass.localize('ui.components.area-picker.add_dialog.name'),\r\n                width: '40%',\r\n                grow: true,\r\n                text: true,\r\n            },\r\n            code_format: {\r\n                title: localize('panels.codes.cards.codes.fields.code_format.heading', this.hass.language),\r\n                width: '40%',\r\n                hide: this.narrow,\r\n                text: true,\r\n            },\r\n            enabled: {\r\n                title: localize('common.enabled', this.hass.language),\r\n                width: '68px',\r\n                align: 'center',\r\n            },\r\n        };\r\n        const data = users.map(item => {\r\n            const output = {\r\n                id: item.user_id,\r\n                icon: html `\r\n          <ha-icon icon=\"mdi:account-outline\"></ha-icon>\r\n        `,\r\n                name: prettyPrint(item.name),\r\n                code_format: item.code_format == 'number'\r\n                    ? prettyPrint(localize('panels.codes.cards.codes.fields.code_format.code_format_number', this.hass.language))\r\n                    : item.code_format == 'text'\r\n                        ? prettyPrint(localize('panels.codes.cards.codes.fields.code_format.code_format_text', this.hass.language))\r\n                        : this.hass.localize('state.default.unknown'),\r\n                enabled: html `\r\n          <ha-switch\r\n            @click=${(ev) => {\r\n                    ev.stopPropagation();\r\n                }}\r\n            ?checked=${item.enabled}\r\n            @change=${(ev) => this.toggleEnabled(ev, item.user_id)}\r\n          ></ha-switch>\r\n        `,\r\n            };\r\n            return output;\r\n        });\r\n        return html `\r\n      <ha-card header=\"${localize('panels.codes.cards.user_management.title', this.hass.language)}\">\r\n        <div class=\"card-content\">\r\n          ${localize('panels.codes.cards.user_management.description', this.hass.language)}\r\n        </div>\r\n\r\n        <alarmo-table\r\n          ?selectable=${true}\r\n          .columns=${columns}\r\n          .data=${data}\r\n          @row-click=${(ev) => {\r\n            const id = String(ev.detail.id);\r\n            navigate(this, exportPath('codes', { params: { edit_user: id } }), true);\r\n        }}\r\n        >\r\n          ${localize('panels.codes.cards.user_management.no_items', this.hass.language)}\r\n        </alarmo-table>\r\n        <div class=\"card-actions\">\r\n          <mwc-button @click=${this.addUserClick}>\r\n            ${localize('panels.codes.cards.user_management.actions.new_user', this.hass.language)}\r\n          </mwc-button>\r\n        </div>\r\n      </ha-card>\r\n    `;\r\n    }\r\n    addUserClick() {\r\n        navigate(this, exportPath('codes', 'new_user'), true);\r\n    }\r\n    saveData(changes) {\r\n        if (!this.hass)\r\n            return;\r\n        this.data = Object.assign(Object.assign({}, this.data), changes);\r\n        saveConfig(this.hass, this.data)\r\n            .catch(e => handleError(e, this.shadowRoot.querySelector('ha-card')))\r\n            .then();\r\n    }\r\n    toggleEnabled(ev, id) {\r\n        const enabled = ev.target.checked;\r\n        saveUser(this.hass, { user_id: id, enabled: enabled })\r\n            .catch(e => handleError(e, ev))\r\n            .then();\r\n    }\r\n};\r\nAlarmViewCodes.styles = commonStyle;\r\n__decorate([\r\n    property()\r\n], AlarmViewCodes.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewCodes.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewCodes.prototype, \"path\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewCodes.prototype, \"data\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewCodes.prototype, \"users\", void 0);\r\nAlarmViewCodes = __decorate([\r\n    customElement('alarm-view-codes')\r\n], AlarmViewCodes);\r\nexport { AlarmViewCodes };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/helpers.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/types.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/styles.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/subscribe-mixin.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/websockets.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-table.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/common/navigation.ts"]}
