{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { localize } from '../../localize/localize';\r\nlet TimeSlider = class TimeSlider extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.min = 0;\r\n        this.max = 100;\r\n        this.step = 10;\r\n        this.value = 0;\r\n        this.scaleFactor = 1;\r\n        this.unit = '';\r\n        this.disabled = false;\r\n    }\r\n    firstUpdated() {\r\n        if (this.value > 0 && this.value < 60)\r\n            this.unit = 'sec';\r\n        if (this.unit == 'min')\r\n            this.scaleFactor = 1 / 60;\r\n        if (this.unit == 'min')\r\n            this.step = 1;\r\n    }\r\n    render() {\r\n        return html `\r\n      <div class=\"container\">\r\n        <div class=\"prefix\">\r\n          <slot name=\"prefix\"></slot>\r\n        </div>\r\n        <div class=\"slider\">\r\n          ${this.getSlider()}\r\n        </div>\r\n        <div class=\"value${this.disabled ? ' disabled' : ''}\" @click=${this.toggleUnit}>\r\n          ${this.getValue()}\r\n        </div>\r\n      </div>\r\n    `;\r\n    }\r\n    getValue() {\r\n        const value = Number(Math.round(this.value * this.scaleFactor));\r\n        if (!value && this.zeroValue) {\r\n            return this.zeroValue;\r\n        }\r\n        return `${value} ${this.getUnit()}`;\r\n    }\r\n    getUnit() {\r\n        switch (this.unit) {\r\n            case 'sec':\r\n                return localize('components.time_slider.seconds', this.hass.language);\r\n            case 'min':\r\n                return localize('components.time_slider.minutes', this.hass.language);\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n    getSlider() {\r\n        return html `\r\n      <ha-slider\r\n        pin\r\n        min=${Math.round(this.min * this.scaleFactor)}\r\n        max=${Math.round(this.max * this.scaleFactor)}\r\n        step=${this.step}\r\n        value=${Math.round(this.value * this.scaleFactor)}\r\n        ?disabled=${this.disabled}\r\n        @change=${this.updateValue}\r\n      ></ha-slider>\r\n    `;\r\n    }\r\n    updateValue(e) {\r\n        const value = Number(e.target.value);\r\n        this.value = Math.round(value / this.scaleFactor);\r\n    }\r\n    toggleUnit() {\r\n        this.unit = this.unit == 'min' ? 'sec' : 'min';\r\n        this.scaleFactor = this.unit == 'min' ? 1 / 60 : 1;\r\n        this.step = this.unit == 'min' ? 1 : 10;\r\n    }\r\n};\r\nTimeSlider.styles = css `\r\n    :host {\r\n      display: flex;\r\n      flex-direction: column;\r\n      min-width: 250px;\r\n    }\r\n\r\n    div.container {\r\n      display: grid;\r\n      grid-template-columns: max-content 1fr 60px;\r\n      grid-template-rows: min-content;\r\n      grid-template-areas: 'prefix slider value';\r\n    }\r\n\r\n    div.prefix {\r\n      grid-area: prefix;\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n\r\n    div.slider {\r\n      grid-area: slider;\r\n      display: flex;\r\n      align-items: center;\r\n      flex: 1;\r\n    }\r\n\r\n    div.value {\r\n      grid-area: value;\r\n      min-width: 40px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: flex-end;\r\n      cursor: pointer;\r\n    }\r\n\r\n    ha-slider {\r\n      width: 100%;\r\n    }\r\n\r\n    .disabled {\r\n      color: var(--disabled-text-color);\r\n    }\r\n  `;\r\n__decorate([\r\n    property({ type: Number })\r\n], TimeSlider.prototype, \"min\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], TimeSlider.prototype, \"max\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], TimeSlider.prototype, \"step\", void 0);\r\n__decorate([\r\n    property({ type: Number })\r\n], TimeSlider.prototype, \"value\", void 0);\r\n__decorate([\r\n    property()\r\n], TimeSlider.prototype, \"scaleFactor\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], TimeSlider.prototype, \"unit\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], TimeSlider.prototype, \"disabled\", void 0);\r\n__decorate([\r\n    property({ type: String })\r\n], TimeSlider.prototype, \"zeroValue\", void 0);\r\nTimeSlider = __decorate([\r\n    customElement('time-slider')\r\n], TimeSlider);\r\nexport { TimeSlider };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts"]}
