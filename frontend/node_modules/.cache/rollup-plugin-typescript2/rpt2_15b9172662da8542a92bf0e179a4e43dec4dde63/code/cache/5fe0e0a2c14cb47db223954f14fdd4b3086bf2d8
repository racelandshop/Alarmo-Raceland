{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { navigate, fireEvent } from 'custom-card-helpers';\r\nimport { fetchConfig, saveConfig, fetchAreas, fetchAutomations, deleteAutomation } from '../../data/websockets';\r\nimport { SubscribeMixin } from '../../subscribe-mixin';\r\nimport { localize } from '../../../localize/localize';\r\nimport { pick, handleError } from '../../helpers';\r\nimport { loadHaForm } from '../../load-ha-elements';\r\nimport { commonStyle } from '../../styles';\r\nimport { exportPath } from '../../common/navigation';\r\nimport './alarm-mode-card';\r\nimport './mqtt-config-card.ts';\r\nimport './area-config-card.ts';\r\nimport '../../components/time-slider';\r\nimport '../../components/settings-row.ts';\r\nimport '../../dialogs/edit-master-dialog.ts';\r\nimport '../../dialogs/confirm-delete-dialog.ts';\r\nlet AlarmViewGeneral = class AlarmViewGeneral extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.areas = {};\r\n        this.automations = {};\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'alarmo_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass) {\r\n            return;\r\n        }\r\n        this.config = await fetchConfig(this.hass);\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.automations = await fetchAutomations(this.hass);\r\n        this.data = pick(this.config, ['trigger_time', 'disarm_after_trigger', 'mqtt', 'master']);\r\n    }\r\n    firstUpdated() {\r\n        (async () => await loadHaForm())();\r\n    }\r\n    render() {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h;\r\n        if (!this.hass || !this.config || !this.data)\r\n            return html ``;\r\n        if (this.path.subpage == 'mqtt_configuration') {\r\n            return html `\r\n        <!-- <mqtt-config-card .hass=${this.hass} .narrow=${this.narrow}></mqtt-config-card> -->\r\n      `;\r\n        }\r\n        if (this.path.params.edit_area) {\r\n            return html `\r\n        <area-editor-card\r\n          .hass=${this.hass}\r\n          .narrow=${this.narrow}\r\n          item=${this.path.params.edit_area}\r\n        ></area-editor-card>\r\n      `;\r\n        }\r\n        else {\r\n            return html `\r\n        <ha-card header=\"${localize('panels.general.title', this.hass.language)}\">\r\n          <div class=\"card-content\">\r\n            ${localize('panels.general.cards.general.description', this.hass.language)}\r\n          </div>\r\n\r\n          <settings-row .narrow=${this.narrow}>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.general.cards.general.fields.disarm_after_trigger.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.general.cards.general.fields.disarm_after_trigger.description', this.hass.language)}\r\n            </span>\r\n            <ha-switch\r\n              ?checked=${this.data.disarm_after_trigger}\r\n              @change=${(ev) => {\r\n                this.saveData({ disarm_after_trigger: ev.target.checked });\r\n            }}\r\n            ></ha-switch>\r\n          </settings-row>\r\n\r\n          <!-- <settings-row .narrow=${this.narrow}>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.general.cards.general.fields.enable_mqtt.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.general.cards.general.fields.enable_mqtt.description', this.hass.language)}\r\n            </span>\r\n            <ha-switch\r\n              ?checked=${(_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.mqtt) === null || _b === void 0 ? void 0 : _b.enabled}\r\n              @change=${(ev) => {\r\n                this.saveData({ mqtt: { ...this.data.mqtt, enabled: ev.target.checked } });\r\n            }}\r\n            ></ha-switch>\r\n          </settings-row> -->\r\n\r\n          ${((_d = (_c = this.data) === null || _c === void 0 ? void 0 : _c.mqtt) === null || _d === void 0 ? void 0 : _d.enabled) && false\r\n                ? html `\r\n                <div style=\"padding: 0px 0px 16px 16px\">\r\n                  <mwc-button\r\n                    outlined\r\n                    @click=${() => navigate(this, exportPath('general', 'mqtt_configuration'), true)}\r\n                  >\r\n                    ${localize('panels.general.cards.general.actions.setup_mqtt', this.hass.language)}\r\n                  </mwc-button>\r\n                </div>\r\n              `\r\n                : ''}\r\n          ${Object.keys(this.areas).length >= 2\r\n                ? html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.general.cards.general.fields.enable_master.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.general.cards.general.fields.enable_master.description', this.hass.language)}\r\n                  </span>\r\n                  <ha-switch\r\n                    ?checked=${((_f = (_e = this.data) === null || _e === void 0 ? void 0 : _e.master) === null || _f === void 0 ? void 0 : _f.enabled) && Object.keys(this.areas).length >= 2}\r\n                    ?disabled=${Object.keys(this.areas).length < 2}\r\n                    @change=${this.toggleEnableMaster}\r\n                  ></ha-switch>\r\n                </settings-row>\r\n              `\r\n                : ''}\r\n          ${((_h = (_g = this.data) === null || _g === void 0 ? void 0 : _g.master) === null || _h === void 0 ? void 0 : _h.enabled) && Object.keys(this.areas).length >= 2\r\n                ? html `\r\n                <div style=\"padding: 0px 0px 16px 16px\">\r\n                  <mwc-button outlined @click=${this.setupMasterClick}>\r\n                    ${localize('panels.general.cards.general.actions.setup_master', this.hass.language)}\r\n                  </mwc-button>\r\n                </div>\r\n              `\r\n                : ''}\r\n        </ha-card>\r\n\r\n        <alarm-mode-card .hass=${this.hass} .narrow=${this.narrow}></alarm-mode-card>\r\n\r\n        <area-config-card .hass=${this.hass} .narrow=${this.narrow}></area-config-card>\r\n      `;\r\n        }\r\n    }\r\n    setupMasterClick(ev) {\r\n        const element = ev.target;\r\n        fireEvent(element, 'show-dialog', {\r\n            dialogTag: 'edit-master-dialog',\r\n            dialogImport: () => import('../../dialogs/edit-master-dialog'),\r\n            dialogParams: {},\r\n        });\r\n    }\r\n    async toggleEnableMaster(ev) {\r\n        const target = ev.target;\r\n        let enabled = target.checked;\r\n        if (!enabled) {\r\n            const automations = Object.values(this.automations).filter(e => e.triggers.some(e => !e.area));\r\n            if (automations.length) {\r\n                const result = await new Promise(resolve => {\r\n                    fireEvent(target, 'show-dialog', {\r\n                        dialogTag: 'confirm-delete-dialog',\r\n                        dialogImport: () => import('../../dialogs/confirm-delete-dialog'),\r\n                        dialogParams: {\r\n                            title: localize('panels.general.dialogs.disable_master.title', this.hass.language),\r\n                            description: localize('panels.general.dialogs.disable_master.description', this.hass.language, 'automations', String(automations.length)),\r\n                            cancel: () => resolve(false),\r\n                            confirm: () => resolve(true),\r\n                        },\r\n                    });\r\n                });\r\n                if (!result) {\r\n                    enabled = true;\r\n                    target.checked = true;\r\n                }\r\n                else if (!enabled && automations.length) {\r\n                    automations.forEach(e => {\r\n                        deleteAutomation(this.hass, e.automation_id).catch(e => handleError(e, ev));\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        this.saveData({ master: Object.assign(Object.assign({}, this.data.master), { enabled: enabled }) });\r\n    }\r\n    saveData(changes) {\r\n        if (!this.hass || !this.data)\r\n            return;\r\n        this.data = Object.assign(Object.assign({}, this.data), changes);\r\n        saveConfig(this.hass, this.data)\r\n            .catch(e => handleError(e, this.shadowRoot.querySelector('ha-card')))\r\n            .then();\r\n    }\r\n};\r\nAlarmViewGeneral.styles = commonStyle;\r\n__decorate([\r\n    property()\r\n], AlarmViewGeneral.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewGeneral.prototype, \"path\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewGeneral.prototype, \"data\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewGeneral.prototype, \"config\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewGeneral.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmViewGeneral.prototype, \"automations\", void 0);\r\nAlarmViewGeneral = __decorate([\r\n    customElement('alarm-view-general')\r\n], AlarmViewGeneral);\r\nexport { AlarmViewGeneral };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/websockets.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/subscribe-mixin.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/helpers.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/load-ha-elements.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/types.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/styles.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/common/navigation.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/views/general/alarm-mode-card.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/time-slider.ts"]}
