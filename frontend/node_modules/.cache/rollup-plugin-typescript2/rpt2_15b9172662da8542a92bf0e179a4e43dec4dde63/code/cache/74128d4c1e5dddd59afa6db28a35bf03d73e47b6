{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { fireEvent, navigate } from 'custom-card-helpers';\r\nimport { mdiClose } from '@mdi/js';\r\nimport { commonStyle } from '../../styles';\r\nimport { EArmModes } from '../../types';\r\nimport { fetchSensors, saveSensor, deleteSensor, fetchAreas, fetchSensorGroups } from '../../data/websockets';\r\nimport { localize } from '../../../localize/localize';\r\nimport { Unique, Without, handleError, showErrorDialog, computeName } from '../../helpers';\r\nimport { sensorConfigByType, getSensorTypeOptions } from '../../data/sensors';\r\nimport { EArmModeIcons, ESensorTypes } from '../../const';\r\nimport { SubscribeMixin } from '../../subscribe-mixin';\r\nimport '../../dialogs/error-dialog';\r\nimport '../../dialogs/manage-sensor-groups-dialog';\r\nimport '../../components/alarmo-select';\r\nimport { exportPath } from '../../common/navigation';\r\nlet SensorEditorCard = class SensorEditorCard extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.showBypassModes = false;\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'alarmo_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        var _a;\r\n        if (!this.hass)\r\n            return;\r\n        const areas = await fetchAreas(this.hass);\r\n        this.areas = areas;\r\n        const sensorGroups = await fetchSensorGroups(this.hass);\r\n        this.sensorGroups = sensorGroups;\r\n        const sensors = await fetchSensors(this.hass);\r\n        this.data = Object.keys(sensors).includes(this.item) ? sensors[this.item] : undefined;\r\n        if (this.data && !((_a = this.data) === null || _a === void 0 ? void 0 : _a.area) && Object.keys(areas).length == 1)\r\n            this.data = Object.assign(Object.assign({}, this.data), { area: Object.keys(this.areas)[0] });\r\n    }\r\n    render() {\r\n        if (!this.data)\r\n            return html ``;\r\n        const stateObj = this.hass.states[this.data.entity_id];\r\n        return html `\r\n      <ha-card>\r\n        <div class=\"card-header\">\r\n          <div class=\"name\">${localize('panels.sensors.cards.editor.title', this.hass.language)}</div>\r\n          <ha-icon-button .path=${mdiClose} @click=${this.cancelClick}></ha-icon-button>\r\n        </div>\r\n        <div class=\"card-content\">\r\n          ${localize('panels.sensors.cards.editor.description', this.hass.language, '{entity}', computeName(this.hass.states[this.item]))}\r\n        </div>\r\n\r\n        ${Object.keys(this.areas).length > 1\r\n            ? html `\r\n              <settings-row .narrow=${this.narrow}>\r\n                <span slot=\"heading\">\r\n                  ${localize('panels.sensors.cards.editor.fields.area.heading', this.hass.language)}\r\n                </span>\r\n                <span slot=\"description\">\r\n                  ${localize('panels.sensors.cards.editor.fields.area.description', this.hass.language)}\r\n                </span>\r\n\r\n                <alarmo-select\r\n                  .items=${Object.values(this.areas).map(e => Object({ value: e.area_id, name: e.name }))}\r\n                  value=${this.data.area}\r\n                  label=${localize('panels.sensors.cards.editor.fields.area.heading', this.hass.language)}\r\n                  @value-changed=${(ev) => (this.data = { ...this.data, area: ev.target.value })}\r\n                  ?invalid=${!this.data.area}\r\n                ></alarmo-select>\r\n              </settings-row>\r\n            `\r\n            : ''}\r\n\r\n        <settings-row .narrow=${this.narrow} .large=${true}>\r\n          <span slot=\"heading\">\r\n            ${localize('panels.sensors.cards.editor.fields.device_type.heading', this.hass.language)}\r\n          </span>\r\n          <span slot=\"description\">\r\n            ${localize('panels.sensors.cards.editor.fields.device_type.description', this.hass.language)}\r\n          </span>\r\n\r\n          <alarmo-select\r\n            .hass=${this.hass}\r\n            .items=${getSensorTypeOptions(this.hass)}\r\n            label=${localize('panels.sensors.cards.editor.fields.device_type.heading', this.hass.language)}\r\n            clearable=${true}\r\n            icons=${true}\r\n            value=${this.data['type']}\r\n            @value-changed=${(ev) => this.setType((ev.target.value || ESensorTypes.Other))}\r\n          ></alarmo-select>\r\n        </settings-row>\r\n\r\n        <settings-row .narrow=${this.narrow} .large=${this.modesByArea(this.data.area).length > 3}>\r\n          <span slot=\"heading\">\r\n            ${localize('panels.sensors.cards.editor.fields.modes.heading', this.hass.language)}\r\n          </span>\r\n          <span slot=\"description\">\r\n            ${localize('panels.sensors.cards.editor.fields.modes.description', this.hass.language)}\r\n          </span>\r\n\r\n          <div>\r\n            ${this.modesByArea(this.data.area).map(el => html `\r\n                <mwc-button\r\n                  class=\"${this.data.modes.includes(el) || this.data.always_on ? 'active' : 'disabled'}\"\r\n                  @click=${() => {\r\n            this.setMode(el);\r\n        }}\r\n                  ?disabled=${this.data.always_on}\r\n                >\r\n                  <ha-icon icon=\"${EArmModeIcons[Object.entries(EArmModes).find(([, v]) => v == el)[0]]}\"></ha-icon>\r\n                  ${localize(`common.modes_short.${el}`, this.hass.language)}\r\n                </mwc-button>\r\n              `)}\r\n          </div>\r\n        </settings-row>\r\n\r\n        <settings-row .narrow=${this.narrow}>\r\n          <span slot=\"heading\">\r\n            ${localize('panels.sensors.cards.editor.fields.group.heading', this.hass.language)}\r\n          </span>\r\n          <span slot=\"description\">\r\n            ${localize('panels.sensors.cards.editor.fields.group.description', this.hass.language)}\r\n          </span>\r\n\r\n          <div>\r\n            ${Object.keys(this.sensorGroups).length\r\n            ? html `\r\n                  <alarmo-select\r\n                    .clearable=${true}\r\n                    .items=${this.getSensorGroups()}\r\n                    value=${this.data.group}\r\n                    label=\"${localize('panels.sensors.cards.editor.fields.group.heading', this.hass.language)}\"\r\n                    @value-changed=${(ev) => {\r\n                this.data = { ...this.data, group: ev.detail.value };\r\n            }}\r\n                  ></alarmo-select>\r\n                `\r\n            : ''}\r\n            <mwc-button @click=${this.manageGroupsClick}>\r\n              ${localize('panels.sensors.cards.editor.actions.setup_groups', this.hass.language)}\r\n            </mwc-button>\r\n          </div>\r\n        </settings-row>\r\n\r\n        <collapsible-section\r\n          .narrow=${this.narrow}\r\n          header=${localize('panels.sensors.cards.editor.actions.toggle_advanced', this.hass.language)}\r\n        >\r\n          ${!this.data.type || [ESensorTypes.Environmental, ESensorTypes.Other].includes(this.data.type)\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.sensors.cards.editor.fields.always_on.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.sensors.cards.editor.fields.always_on.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <ha-switch\r\n                    ?checked=${this.data.always_on}\r\n                    @change=${(ev) => this._SetData({ always_on: ev.target.checked })}\r\n                  ></ha-switch>\r\n                </settings-row>\r\n              `\r\n            : ''}\r\n          ${!this.data.type ||\r\n            [ESensorTypes.Window, ESensorTypes.Door, ESensorTypes.Motion, ESensorTypes.Other].includes(this.data.type)\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.sensors.cards.editor.fields.use_exit_delay.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.sensors.cards.editor.fields.use_exit_delay.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <ha-switch\r\n                    ?checked=${this.data.use_exit_delay}\r\n                    ?disabled=${this.data.always_on}\r\n                    @change=${(ev) => this._SetData({ use_exit_delay: ev.target.checked })}\r\n                  ></ha-switch>\r\n                </settings-row>\r\n\r\n                ${(!this.data.type || [ESensorTypes.Motion, ESensorTypes.Other].includes(this.data.type)) &&\r\n                this.data.use_exit_delay\r\n                ? html `\r\n                      <settings-row .narrow=${this.narrow} nested>\r\n                        <span slot=\"heading\">\r\n                          ${localize('panels.sensors.cards.editor.fields.allow_open.heading', this.hass.language)}\r\n                        </span>\r\n                        <span slot=\"description\">\r\n                          ${localize('panels.sensors.cards.editor.fields.allow_open.description', this.hass.language)}\r\n                        </span>\r\n\r\n                        <ha-switch\r\n                          ?checked=${this.data.allow_open}\r\n                          ?disabled=${this.data.always_on || this.data.arm_on_close}\r\n                          @change=${(ev) => this._SetData({ allow_open: ev.target.checked })}\r\n                        ></ha-switch>\r\n                      </settings-row>\r\n                    `\r\n                : ''}\r\n              `\r\n            : ''}\r\n          ${!this.data.type ||\r\n            [ESensorTypes.Window, ESensorTypes.Door, ESensorTypes.Motion, ESensorTypes.Other].includes(this.data.type)\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.sensors.cards.editor.fields.use_entry_delay.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.sensors.cards.editor.fields.use_entry_delay.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <ha-switch\r\n                    ?checked=${this.data.use_entry_delay}\r\n                    ?disabled=${this.data.always_on}\r\n                    @change=${(ev) => this._SetData({ use_entry_delay: ev.target.checked })}\r\n                  ></ha-switch>\r\n                </settings-row>\r\n              `\r\n            : ''}\r\n          ${!this.data.type || [ESensorTypes.Door, ESensorTypes.Other].includes(this.data.type)\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.sensors.cards.editor.fields.arm_on_close.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.sensors.cards.editor.fields.arm_on_close.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <ha-switch\r\n                    ?checked=${this.data.arm_on_close}\r\n                    ?disabled=${this.data.always_on}\r\n                    @change=${(ev) => this._SetData({ arm_on_close: ev.target.checked })}\r\n                  ></ha-switch>\r\n                </settings-row>\r\n              `\r\n            : ''}\r\n          ${!this.data.type || [ESensorTypes.Window, ESensorTypes.Door, ESensorTypes.Other].includes(this.data.type)\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.sensors.cards.editor.fields.auto_bypass.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.sensors.cards.editor.fields.auto_bypass.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <ha-switch\r\n                    ?checked=${this.data.auto_bypass}\r\n                    ?disabled=${this.data.always_on}\r\n                    @change=${(ev) => this._SetData({ auto_bypass: ev.target.checked })}\r\n                  ></ha-switch>\r\n                </settings-row>\r\n\r\n                ${this.data.auto_bypass\r\n                ? html `\r\n                      <settings-row .narrow=${this.narrow} nested>\r\n                        <span slot=\"heading\">\r\n                          ${localize('panels.sensors.cards.editor.fields.auto_bypass.modes', this.hass.language)}\r\n                        </span>\r\n                        <div>\r\n                          ${this.modesByArea(this.data.area).map(el => html `\r\n                              <mwc-button\r\n                                class=\"${this.data.auto_bypass_modes.includes(el) && this.data.modes.includes(el)\r\n                    ? 'active'\r\n                    : ''}\"\r\n                                ?disabled=${!this.data.modes.includes(el)}\r\n                                @click=${() => {\r\n                    this.setBypassMode(el);\r\n                }}\r\n                              >\r\n                                <ha-icon\r\n                                  icon=\"${EArmModeIcons[Object.entries(EArmModes).find(([, v]) => v == el)[0]]}\"\r\n                                ></ha-icon>\r\n                                ${localize(`common.modes_short.${el}`, this.hass.language)}\r\n                              </mwc-button>\r\n                            `)}\r\n                        </div>\r\n                      </settings-row>\r\n                    `\r\n                : ''}\r\n              `\r\n            : ''}\r\n\r\n          <settings-row .narrow=${this.narrow}>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.sensors.cards.editor.fields.trigger_unavailable.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.sensors.cards.editor.fields.trigger_unavailable.description', this.hass.language)}\r\n            </span>\r\n\r\n            <ha-switch\r\n              ?checked=${this.data.trigger_unavailable}\r\n              @change=${(ev) => this._SetData({ trigger_unavailable: ev.target.checked })}\r\n            ></ha-switch>\r\n          </settings-row>\r\n        </collapsible-section>\r\n\r\n        <div class=\"card-actions\">\r\n          <mwc-button @click=${this.saveClick}>\r\n            ${this.hass.localize('ui.common.save')}\r\n          </mwc-button>\r\n\r\n          <mwc-button class=\"warning\" @click=${this.deleteClick}>\r\n            ${localize('panels.sensors.cards.editor.actions.remove', this.hass.language)}\r\n          </mwc-button>\r\n        </div>\r\n      </ha-card>\r\n    `;\r\n    }\r\n    modesByArea(area_id) {\r\n        const modesPerArea = Object.keys(this.areas).reduce((obj, e) => Object.assign(obj, {\r\n            [e]: Object.entries(this.areas[e].modes)\r\n                .filter(([, v]) => v.enabled)\r\n                .map(([k]) => k),\r\n        }), {});\r\n        return area_id ? modesPerArea[area_id] : Object.values(modesPerArea).reduce((a, b) => a.filter(i => b.includes(i)));\r\n    }\r\n    _SetData(data) {\r\n        if (!this.data)\r\n            return;\r\n        for (const [key, val] of Object.entries(data)) {\r\n            switch (key) {\r\n                case 'always_on':\r\n                    this.data = Object.assign(Object.assign({}, this.data), { always_on: val == true });\r\n                    if (val)\r\n                        this.data = Object.assign(Object.assign({}, this.data), { arm_on_close: false, use_exit_delay: false, use_entry_delay: false, allow_open: false, auto_bypass: false });\r\n                    break;\r\n                case 'use_entry_delay':\r\n                    this.data = Object.assign(Object.assign({}, this.data), { use_entry_delay: val == true });\r\n                    break;\r\n                case 'use_exit_delay':\r\n                    this.data = Object.assign(Object.assign({}, this.data), { use_exit_delay: val == true });\r\n                    if (val)\r\n                        this.data = Object.assign(Object.assign({}, this.data), { allow_open: false });\r\n                    break;\r\n                case 'arm_on_close':\r\n                    this.data = Object.assign(Object.assign({}, this.data), { arm_on_close: val == true });\r\n                    if (val)\r\n                        this.data = Object.assign(Object.assign({}, this.data), { always_on: false, allow_open: false });\r\n                    break;\r\n                case 'allow_open':\r\n                    this.data = Object.assign(Object.assign({}, this.data), { allow_open: val == true });\r\n                    if (val)\r\n                        this.data = Object.assign(Object.assign({}, this.data), { arm_on_close: false, always_on: false, use_exit_delay: true });\r\n                    break;\r\n                case 'auto_bypass':\r\n                    this.data = Object.assign(Object.assign({}, this.data), { auto_bypass: val == true });\r\n                    if (val)\r\n                        this.data = Object.assign(Object.assign({}, this.data), { always_on: false });\r\n                    break;\r\n                case 'trigger_unavailable':\r\n                    this.data = Object.assign(Object.assign({}, this.data), { trigger_unavailable: val == true });\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    setMode(mode) {\r\n        if (!this.data)\r\n            return;\r\n        this.data = Object.assign(Object.assign({}, this.data), { modes: this.data.modes.includes(mode) ? Without(this.data.modes, mode) : Unique(this.data.modes.concat([mode])) });\r\n    }\r\n    setBypassMode(mode) {\r\n        if (!this.data)\r\n            return;\r\n        this.data = Object.assign(Object.assign({}, this.data), { auto_bypass_modes: this.data.auto_bypass_modes.includes(mode)\r\n                ? Without(this.data.auto_bypass_modes, mode)\r\n                : Unique(this.data.auto_bypass_modes.concat([mode])) });\r\n    }\r\n    setType(type) {\r\n        if (!this.data)\r\n            return;\r\n        const settings = type != ESensorTypes.Other ? sensorConfigByType(this.modesByArea(this.data.area))[type] : {};\r\n        this.data = Object.assign(Object.assign(Object.assign({}, this.data), { type: type }), settings);\r\n    }\r\n    deleteClick(ev) {\r\n        deleteSensor(this.hass, this.item)\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => {\r\n            this.cancelClick();\r\n        });\r\n    }\r\n    saveClick(ev) {\r\n        if (!this.data)\r\n            return;\r\n        const errors = [];\r\n        this.data = Object.assign(Object.assign({}, this.data), { auto_bypass_modes: this.data.auto_bypass_modes.filter(e => this.data.modes.includes(e)) });\r\n        if (!this.data.area)\r\n            errors.push(localize('panels.sensors.cards.editor.errors.no_area', this.hass.language));\r\n        if (!this.data.modes.length && !this.data.always_on)\r\n            errors.push(localize('panels.sensors.cards.editor.errors.no_modes', this.hass.language));\r\n        if (this.data.auto_bypass && !this.data.auto_bypass_modes.length)\r\n            errors.push(localize('panels.sensors.cards.editor.errors.no_auto_bypass_modes', this.hass.language));\r\n        if (errors.length) {\r\n            showErrorDialog(ev, html `\r\n          ${localize('panels.sensors.cards.editor.errors.description', this.hass.language)}\r\n          <ul>\r\n            ${errors.map(e => html `\r\n                  <li>${e}</li>\r\n                `)}\r\n          </ul>\r\n        `);\r\n        }\r\n        else {\r\n            saveSensor(this.hass, Object.assign({}, this.data))\r\n                .catch(e => handleError(e, ev))\r\n                .then(() => {\r\n                this.cancelClick();\r\n            });\r\n        }\r\n    }\r\n    cancelClick() {\r\n        navigate(this, exportPath('sensors'), true);\r\n    }\r\n    manageGroupsClick(ev) {\r\n        const element = ev.target;\r\n        fireEvent(element, 'show-dialog', {\r\n            dialogTag: 'manage-sensor-groups-dialog',\r\n            dialogImport: () => import('../../dialogs/manage-sensor-groups-dialog'),\r\n            dialogParams: {},\r\n        });\r\n    }\r\n    getSensorGroups() {\r\n        return Object.keys(this.sensorGroups).map(e => Object({\r\n            value: e,\r\n            name: this.sensorGroups[e].name,\r\n        }));\r\n    }\r\n};\r\nSensorEditorCard.styles = commonStyle;\r\n__decorate([\r\n    property()\r\n], SensorEditorCard.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorEditorCard.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorEditorCard.prototype, \"item\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorEditorCard.prototype, \"data\", void 0);\r\n__decorate([\r\n    property()\r\n], SensorEditorCard.prototype, \"showBypassModes\", void 0);\r\nSensorEditorCard = __decorate([\r\n    customElement('sensor-editor-card')\r\n], SensorEditorCard);\r\nexport { SensorEditorCard };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/@mdi/js/mdi.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/styles.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/types.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/websockets.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/helpers.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/sensors.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/const.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-select.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/subscribe-mixin.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/dialogs/error-dialog.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/dialogs/manage-sensor-groups-dialog.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-select.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/common/navigation.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/dialogs/manage-sensor-groups-dialog.ts"]}
