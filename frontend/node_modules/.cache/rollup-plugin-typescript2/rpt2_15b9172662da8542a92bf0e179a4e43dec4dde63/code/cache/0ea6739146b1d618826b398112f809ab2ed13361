{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement, state } from 'lit/decorators.js';\r\nimport { fireEvent } from 'custom-card-helpers';\r\nimport { mdiClose, mdiChevronRight } from '@mdi/js';\r\nimport { fetchSensors, fetchSensorGroups } from '../data/websockets';\r\nimport { dialogStyle } from '../styles';\r\nimport { SubscribeMixin } from '../subscribe-mixin';\r\nimport './create-sensor-group-dialog';\r\nimport { localize } from '../../localize/localize';\r\nlet ManageSensorGroupsDialog = class ManageSensorGroupsDialog extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.sensorGroups = {};\r\n        this.sensors = {};\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'alarmo_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass)\r\n            return;\r\n        this.sensorGroups = await fetchSensorGroups(this.hass);\r\n        this.sensors = await fetchSensors(this.hass);\r\n    }\r\n    async showDialog(params) {\r\n        await this._fetchData();\r\n        this._params = params;\r\n        await this.updateComplete;\r\n    }\r\n    async closeDialog() {\r\n        this._params = undefined;\r\n    }\r\n    render() {\r\n        if (!this._params)\r\n            return html ``;\r\n        return html `\r\n      <ha-dialog open .heading=${this.renderHeader()} @closed=${this.closeDialog} @close-dialog=${this.closeDialog}>\r\n        <div class=\"wrapper\">\r\n          <div class=\"description\">\r\n            ${localize('panels.sensors.dialogs.manage_groups.description', this.hass.language)}\r\n          </div>\r\n          <div class=\"container\">\r\n            ${Object.keys(this.sensorGroups).length\r\n            ? Object.values(this.sensorGroups).map(e => this.renderGroup(e))\r\n            : localize('panels.sensors.dialogs.manage_groups.no_items', this.hass.language)}\r\n          </div>\r\n        </div>\r\n        <mwc-button slot=\"secondaryAction\" @click=${this.createGroupClick}>\r\n          <ha-icon icon=\"hass:plus\"></ha-icon>\r\n          ${localize('panels.sensors.dialogs.manage_groups.actions.new_group', this.hass.language)}\r\n        </mwc-button>\r\n      </ha-dialog>\r\n    `;\r\n    }\r\n    renderHeader() {\r\n        return html `\r\n      <span class=\"header_title\">${localize('panels.sensors.dialogs.manage_groups.title', this.hass.language)}</span>\r\n      <ha-icon-button\r\n        .label=${this.hass.localize('ui.dialogs.generic.close')}\r\n        .path=${mdiClose}\r\n        dialogAction=\"close\"\r\n        class=\"header_button\"\r\n      ></ha-icon-button>\r\n    `;\r\n    }\r\n    renderGroup(item) {\r\n        return html `\r\n    <ha-card\r\n      outlined\r\n      @click=${(ev) => this.editGroupClick(ev, item.group_id)}\r\n    >\r\n      <ha-icon icon=\"hass:folder-outline\"></ha-icon>\r\n      <div>\r\n        <span class=\"name\">${item.name}</span>\r\n        <span class=\"description\">${localize('panels.general.cards.areas.table.summary_sensors', this.hass.language, '{number}', String(item.entities.length))}\r\n      </div>\r\n      <ha-icon-button .path=${mdiChevronRight}>\r\n      </ha-icon-button>\r\n    </ha-card>\r\n    `;\r\n    }\r\n    createGroupClick(ev) {\r\n        const element = ev.target;\r\n        fireEvent(element, 'show-dialog', {\r\n            dialogTag: 'create-sensor-group-dialog',\r\n            dialogImport: () => import('./create-sensor-group-dialog'),\r\n            dialogParams: {},\r\n        });\r\n    }\r\n    editGroupClick(ev, group_id) {\r\n        const element = ev.target;\r\n        fireEvent(element, 'show-dialog', {\r\n            dialogTag: 'create-sensor-group-dialog',\r\n            dialogImport: () => import('./create-sensor-group-dialog'),\r\n            dialogParams: { group_id: group_id },\r\n        });\r\n    }\r\n    static get styles() {\r\n        return css `\r\n      ${dialogStyle}\r\n\r\n      div.wrapper {\r\n        color: var(--primary-text-color);\r\n      }\r\n      div.container {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n      }\r\n      ha-card {\r\n        width: 100%;\r\n        text-align: center;\r\n        margin: 4px;\r\n        box-sizing: border-box;\r\n        padding: 8px;\r\n        color: var(--primary-text-color);\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n        display: flex;\r\n        flex-direction: row;\r\n      }\r\n      ha-card:hover {\r\n        background: rgba(var(--rgb-secondary-text-color), 0.1);\r\n      }\r\n      ha-card ha-icon {\r\n        --mdc-icon-size: 24px;\r\n        display: flex;\r\n        flex: 0 0 40px;\r\n        margin: 0px 10px;\r\n        align-items: center;\r\n        color: var(--state-icon-color);\r\n      }\r\n      ha-card ha-icon-button {\r\n        --mdc-icon-size: 24px;\r\n        display: flex;\r\n        flex: 0 0 40px;\r\n        margin: 0px 10px;\r\n        align-items: center;\r\n      }\r\n      ha-card div {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        flex: 1;\r\n      }\r\n      ha-card span {\r\n        display: flex;\r\n        flex: 0 0 100%;\r\n      }\r\n      ha-card span.description {\r\n        color: var(--secondary-text-color);\r\n      }\r\n      mwc-button ha-icon {\r\n        padding-right: 11px;\r\n      }\r\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], ManageSensorGroupsDialog.prototype, \"hass\", void 0);\r\n__decorate([\r\n    state()\r\n], ManageSensorGroupsDialog.prototype, \"_params\", void 0);\r\n__decorate([\r\n    property()\r\n], ManageSensorGroupsDialog.prototype, \"sensorGroups\", void 0);\r\n__decorate([\r\n    property()\r\n], ManageSensorGroupsDialog.prototype, \"sensors\", void 0);\r\nManageSensorGroupsDialog = __decorate([\r\n    customElement('manage-sensor-groups-dialog')\r\n], ManageSensorGroupsDialog);\r\nexport { ManageSensorGroupsDialog };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/@mdi/js/mdi.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/websockets.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/types.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/styles.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/subscribe-mixin.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/dialogs/create-sensor-group-dialog.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts"]}
