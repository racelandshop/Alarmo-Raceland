{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { navigate } from 'custom-card-helpers';\r\nimport { mdiClose } from '@mdi/js';\r\nimport { loadHaForm } from '../../load-ha-elements';\r\nimport { commonStyle } from '../../styles';\r\nimport '../../components/settings-row.ts';\r\nimport '../../components/collapsible-section.ts';\r\nimport { fetchConfig, saveConfig, fetchAreas } from '../../data/websockets';\r\nimport { SubscribeMixin } from '../../subscribe-mixin';\r\nimport { localize } from '../../../localize/localize';\r\nimport { handleError, prettyPrint, filterState, commandToState, Assign } from '../../helpers';\r\nimport { AlarmStates, AlarmCommands } from '../../const';\r\nimport { exportPath } from '../../common/navigation';\r\nlet MqttConfigCard = class MqttConfigCard extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.areas = {};\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'alarmo_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass) {\r\n            return;\r\n        }\r\n        const config = await fetchConfig(this.hass);\r\n        this.config = config;\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.selection = config.mqtt;\r\n    }\r\n    firstUpdated() {\r\n        (async () => await loadHaForm())();\r\n    }\r\n    render() {\r\n        if (!this.hass || !this.selection)\r\n            return html ``;\r\n        return html `\r\n      <ha-card>\r\n        <div class=\"card-header\">\r\n          <div class=\"name\">${localize('panels.general.cards.mqtt.title', this.hass.language)}</div>\r\n          <ha-icon-button .path=${mdiClose} @click=${this.cancelClick}></ha-icon-button>\r\n        </div>\r\n        <div class=\"card-content\">${localize('panels.general.cards.mqtt.description', this.hass.language)}</div>\r\n\r\n        <settings-row .narrow=${this.narrow}>\r\n          <span slot=\"heading\">\r\n            ${localize('panels.general.cards.mqtt.fields.state_topic.heading', this.hass.language)}\r\n          </span>\r\n          <span slot=\"description\">\r\n            ${localize('panels.general.cards.mqtt.fields.state_topic.description', this.hass.language)}\r\n          </span>\r\n          <ha-textfield\r\n            label=\"${localize('panels.general.cards.mqtt.fields.state_topic.heading', this.hass.language)}\"\r\n            value=${this.selection.state_topic}\r\n            @change=${(ev) => {\r\n            this.selection = { ...this.selection, state_topic: ev.target.value };\r\n        }}\r\n          ></ha-textfield>\r\n        </settings-row>\r\n\r\n        <collapsible-section\r\n          .narrow=${this.narrow}\r\n          header=${localize('panels.general.cards.mqtt.fields.state_payload.heading', this.hass.language)}\r\n        >\r\n          ${Object.values(AlarmStates)\r\n            .filter(state => Object.values(this.areas).some(area => filterState(state, area.modes)))\r\n            .map(e => html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">${prettyPrint(e)}</span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.general.cards.mqtt.fields.state_payload.item', this.hass.language, '{state}', prettyPrint(e))}\r\n                  </span>\r\n                  <ha-textfield\r\n                    label=${prettyPrint(e)}\r\n                    placeholder=${e}\r\n                    value=${this.selection.state_payload[e] || ''}\r\n                    @change=${(ev) => {\r\n            this.selection = Assign(this.selection, {\r\n                state_payload: { [e]: ev.target.value },\r\n            });\r\n        }}\r\n                  ></ha-textfield>\r\n                </settings-row>\r\n              `)}\r\n        </collapsible-section>\r\n\r\n        <settings-row .narrow=${this.narrow}>\r\n          <span slot=\"heading\">\r\n            ${localize('panels.general.cards.mqtt.fields.event_topic.heading', this.hass.language)}\r\n          </span>\r\n          <span slot=\"description\">\r\n            ${localize('panels.general.cards.mqtt.fields.event_topic.description', this.hass.language)}\r\n          </span>\r\n          <ha-textfield\r\n            label=\"${localize('panels.general.cards.mqtt.fields.event_topic.heading', this.hass.language)}\"\r\n            value=${this.selection.event_topic}\r\n            @change=${(ev) => {\r\n            this.selection = { ...this.selection, event_topic: ev.target.value };\r\n        }}\r\n          ></ha-textfield>\r\n        </settings-row>\r\n\r\n        <settings-row .narrow=${this.narrow}>\r\n          <span slot=\"heading\">\r\n            ${localize('panels.general.cards.mqtt.fields.command_topic.heading', this.hass.language)}\r\n          </span>\r\n          <span slot=\"description\">\r\n            ${localize('panels.general.cards.mqtt.fields.command_topic.description', this.hass.language)}\r\n          </span>\r\n          <ha-textfield\r\n            label=\"${localize('panels.general.cards.mqtt.fields.command_topic.heading', this.hass.language)}\"\r\n            value=${this.selection.command_topic}\r\n            @change=${(ev) => {\r\n            this.selection = { ...this.selection, command_topic: ev.target.value };\r\n        }}\r\n          ></ha-textfield>\r\n        </settings-row>\r\n\r\n        <collapsible-section\r\n          .narrow=${this.narrow}\r\n          header=${localize('panels.general.cards.mqtt.fields.command_payload.heading', this.hass.language)}\r\n        >\r\n          ${Object.values(AlarmCommands)\r\n            .filter(command => Object.values(this.areas).some(area => filterState(commandToState(command), area.modes)))\r\n            .map(e => html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">${prettyPrint(e)}</span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.general.cards.mqtt.fields.command_payload.item', this.hass.language, '{command}', prettyPrint(e))}\r\n                  </span>\r\n                  <ha-textfield\r\n                    label=${prettyPrint(e)}\r\n                    placeholder=${e}\r\n                    value=${this.selection.command_payload[e] || ''}\r\n                    @change=${(ev) => {\r\n            this.selection = Assign(this.selection, {\r\n                command_payload: { [e]: ev.target.value },\r\n            });\r\n        }}\r\n                  ></ha-textfield>\r\n                </settings-row>\r\n              `)}\r\n        </collapsible-section>\r\n\r\n        <settings-row .narrow=${this.narrow}>\r\n          <span slot=\"heading\">\r\n            ${localize('panels.general.cards.mqtt.fields.require_code.heading', this.hass.language)}\r\n          </span>\r\n          <span slot=\"description\">\r\n            ${localize('panels.general.cards.mqtt.fields.require_code.description', this.hass.language)}\r\n          </span>\r\n          <ha-switch\r\n            ?checked=${this.selection.require_code}\r\n            ?disabled=${!this.config.code_arm_required && !this.config.code_disarm_required}\r\n            @change=${(ev) => {\r\n            this.selection = { ...this.selection, require_code: ev.target.checked };\r\n        }}\r\n          ></ha-switch>\r\n        </settings-row>\r\n\r\n        <div class=\"card-actions\">\r\n          <mwc-button @click=${this.saveClick}>\r\n            ${this.hass.localize('ui.common.save')}\r\n          </mwc-button>\r\n        </div>\r\n      </ha-card>\r\n    `;\r\n    }\r\n    saveClick(ev) {\r\n        if (!this.hass)\r\n            return;\r\n        saveConfig(this.hass, { mqtt: Object.assign(Object.assign({}, this.selection), { enabled: true }) })\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => {\r\n            this.cancelClick();\r\n        });\r\n    }\r\n    cancelClick() {\r\n        navigate(this, exportPath('general'), true);\r\n    }\r\n};\r\nMqttConfigCard.styles = commonStyle;\r\n__decorate([\r\n    property()\r\n], MqttConfigCard.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], MqttConfigCard.prototype, \"config\", void 0);\r\n__decorate([\r\n    property()\r\n], MqttConfigCard.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], MqttConfigCard.prototype, \"selection\", void 0);\r\nMqttConfigCard = __decorate([\r\n    customElement('mqtt-config-card')\r\n], MqttConfigCard);\r\nexport { MqttConfigCard };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/@mdi/js/mdi.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/load-ha-elements.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/types.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/styles.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/websockets.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/subscribe-mixin.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/helpers.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/const.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/common/navigation.ts"]}
