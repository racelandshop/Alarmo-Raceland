{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { fireEvent } from 'custom-card-helpers';\r\nimport { isDefined, IsEqual } from '../helpers';\r\nlet AlarmoSelector = class AlarmoSelector extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.items = [];\r\n        this.value = [];\r\n        this.label = '';\r\n        this.invalid = false;\r\n    }\r\n    shouldUpdate(changedProps) {\r\n        if (changedProps.get('items')) {\r\n            if (!IsEqual(this.items, changedProps.get('items')))\r\n                this.firstUpdated();\r\n        }\r\n        return true;\r\n    }\r\n    firstUpdated() {\r\n        //remove items from selection which are not in the list (anymore)\r\n        if (this.value.some(e => !this.items.map(v => v.value).includes(e))) {\r\n            this.value = this.value.filter(e => this.items.map(v => v.value).includes(e));\r\n            fireEvent(this, 'value-changed', { value: this.value });\r\n        }\r\n    }\r\n    render() {\r\n        return html `\n      <div class=\"chip-set\">\n        ${this.value.length\r\n            ? this.value\r\n                .map(val => this.items.find(e => e.value == val))\r\n                .filter(isDefined)\r\n                .map(e => html `\n          <div class=\"chip\">\n            <ha-icon class=\"icon\" icon=${e.icon}>\n            </ha-icon>\n            <span class=\"label\">\n              ${e.name}\n            </span>            \n            <ha-icon class=\"button\" icon=\"hass:close\" @click=${() => this._removeClick(e.value)}>\n            </ha-icon>\n            </mwc-icon-button>\n          </div>\n        `)\r\n            : ''}\n      </div>\n      <alarmo-select\n        .hass=${this.hass}\n        .items=${this.items.filter(e => !this.value.includes(e.value))}\n        ?disabled=${this.value.length == this.items.length}\n        label=${this.label}\n        icons=${true}\n        @value-changed=${this._addClick}\n        ?invalid=${this.invalid && this.value.length != this.items.length}\n      ></alarmo-select>\n    `;\r\n    }\r\n    _removeClick(value) {\r\n        this.value = this.value.filter(e => e !== value);\r\n        fireEvent(this, 'value-changed', { value: this.value });\r\n    }\r\n    _addClick(ev) {\r\n        ev.stopPropagation();\r\n        const target = ev.target;\r\n        const value = target.value;\r\n        if (!this.value.includes(value))\r\n            this.value = [...this.value, value];\r\n        target.value = '';\r\n        fireEvent(this, 'value-changed', { value: [...this.value] });\r\n    }\r\n    static get styles() {\r\n        return css `\n      div.chip-set {\n        margin: 0px -4px;\n      }\n      div.chip {\n        height: 32px;\n        border-radius: 16px;\n        border: 2px solid rgb(168, 232, 251);\n        line-height: 1.25rem;\n        font-size: 0.875rem;\n        font-weight: 400;\n        padding: 0px 12px;\n        display: inline-flex;\n        align-items: center;\n        box-sizing: border-box;\n        margin: 4px;\n      }\n      .icon {\n        vertical-align: middle;\n        outline: none;\n        display: flex;\n        align-items: center;\n        border-radius: 50%;\n        padding: 6px;\n        color: rgba(0, 0, 0, 0.54);\n        background: rgb(168, 232, 251);\n        --mdc-icon-size: 20px;\n        margin-left: -14px !important;\n      }\n      .label {\n        margin: 0px 4px;\n      }\n      .button {\n        cursor: pointer;\n        background: var(--secondary-text-color);\n        border-radius: 50%;\n        --mdc-icon-size: 14px;\n        color: var(--card-background-color);\n        width: 16px;\n        height: 16px;\n        padding: 1px;\n        box-sizing: border-box;\n        display: inline-flex;\n        align-items: center;\n        margin-right: -6px !important;\n      }\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property()\r\n], AlarmoSelector.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmoSelector.prototype, \"items\", void 0);\r\n__decorate([\r\n    property({ type: Array })\r\n], AlarmoSelector.prototype, \"value\", void 0);\r\n__decorate([\r\n    property()\r\n], AlarmoSelector.prototype, \"label\", void 0);\r\n__decorate([\r\n    property({ type: Boolean })\r\n], AlarmoSelector.prototype, \"invalid\", void 0);\r\nAlarmoSelector = __decorate([\r\n    customElement('alarmo-selector')\r\n], AlarmoSelector);\r\nexport { AlarmoSelector };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/helpers.ts"]}
