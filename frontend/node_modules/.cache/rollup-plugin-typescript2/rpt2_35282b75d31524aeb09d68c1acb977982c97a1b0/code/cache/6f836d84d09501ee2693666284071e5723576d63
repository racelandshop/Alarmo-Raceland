{"code":"import { __decorate } from \"tslib\";\r\nimport { css, html, LitElement } from 'lit';\r\nimport { customElement, property } from 'lit/decorators';\r\nlet AlarmoCollabsibleGroup = class AlarmoCollabsibleGroup extends LitElement {\r\n    static get styles() {\r\n        return css `\n      :host {\n        display: block;\n      }\n    `;\r\n    }\r\n    render() {\r\n        return html `\n      <slot></slot>\n    `;\r\n    }\r\n    constructor() {\r\n        super();\r\n        this.addEventListener('clickHeader', this.manageSpoilers);\r\n    }\r\n    manageSpoilers(ev) {\r\n        const el = ev.target;\r\n        if (el.getAttribute('active'))\r\n            el.removeAttribute('active');\r\n        else\r\n            el.setAttribute('active', 'true');\r\n        const active = this.querySelectorAll('alarmo-collapsible-header[active]');\r\n        active.forEach(function (i) {\r\n            if (i !== el)\r\n                i.removeAttribute('active');\r\n        });\r\n    }\r\n};\r\nAlarmoCollabsibleGroup = __decorate([\r\n    customElement('alarmo-collapsible-group')\r\n], AlarmoCollabsibleGroup);\r\nlet AcItem = class AcItem extends LitElement {\r\n    static get styles() {\r\n        return css `\n      :host {\n        display: block;\n      }\n    `;\r\n    }\r\n    render() {\r\n        return html `\n      <slot></slot>\n    `;\r\n    }\r\n};\r\nAcItem = __decorate([\r\n    customElement('alarmo-collapsible-item')\r\n], AcItem);\r\nlet AlarmoCollabsibleHeader = class AlarmoCollabsibleHeader extends LitElement {\r\n    constructor() {\r\n        super();\r\n        this.clickHeader = new CustomEvent('clickHeader', {\r\n            detail: { message: 'clickHeader happened.' },\r\n            bubbles: true,\r\n            composed: true,\r\n        });\r\n        this.active = false;\r\n        this.addEventListener('click', this.handleClick);\r\n    }\r\n    handleClick() {\r\n        this.dispatchEvent(this.clickHeader);\r\n    }\r\n    render() {\r\n        return html `\n      <mwc-list-item graphic=\"avatar\" twoline hasMeta>\n        <slot name=\"icon\" slot=\"graphic\"></slot>\n        <span><slot name=\"title\"></slot></span>\n        <span slot=\"secondary\"><slot name=\"description\"></slot></span>\n        <ha-icon slot=\"meta\" icon=\"hass:chevron-down\" class=\"chevron\"></ha-icon>\n      </mwc-list-item>\n    `;\r\n    }\r\n    static get styles() {\r\n        return css `\n      :host {\n        display: block;\n        cursor: pointer;\n      }\n      :host mwc-list-item::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        pointer-events: none;\n        content: '';\n        transition: opacity 15ms linear;\n        will-change: opacity;\n        background-color: black;\n        opacity: 0;\n      }\n      :host mwc-list-item:hover::before {\n        opacity: 0.04;\n      }\n      :host([active]) mwc-list-item::before {\n        opacity: 0.1;\n      }\n      :host([active]) mwc-list-item:hover::before {\n        opacity: 0.12;\n      }\n      :host mwc-list-item:active::before,\n      :host([active]) mwc-list-item:active::before {\n        opacity: 0.14;\n      }\n      ::slotted(ha-icon) {\n        width: 40px;\n        height: 40px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-right: 16px;\n      }\n      :host mwc-list-item {\n        font-size: 15px;\n        --mdc-typography-body2-font-size: 14px;\n      }\n      :host .chevron {\n        display: block;\n        transition: 0.4s;\n      }\n      :host([active]) .chevron {\n        transform: rotate(180deg);\n      }\n    `;\r\n    }\r\n    attributeChangedCallback(name, oldval, newval) {\r\n        if (this.hasAttribute('active') && this.nextElementSibling) {\r\n            this.nextElementSibling.style.maxHeight = this.nextElementSibling.scrollHeight + 'px';\r\n        }\r\n        else if (this.nextElementSibling) {\r\n            this.nextElementSibling.style.maxHeight = '0px';\r\n        }\r\n        super.attributeChangedCallback(name, oldval, newval);\r\n    }\r\n};\r\n__decorate([\r\n    property({ type: CustomEvent })\r\n], AlarmoCollabsibleHeader.prototype, \"clickHeader\", void 0);\r\n__decorate([\r\n    property({\r\n        type: Boolean,\r\n        attribute: true,\r\n        reflect: true,\r\n    })\r\n], AlarmoCollabsibleHeader.prototype, \"active\", void 0);\r\nAlarmoCollabsibleHeader = __decorate([\r\n    customElement('alarmo-collapsible-header')\r\n], AlarmoCollabsibleHeader);\r\nlet AlarmoCollabsibleBody = class AlarmoCollabsibleBody extends LitElement {\r\n    static get styles() {\r\n        return css `\n      :host {\n        display: block;\n        background-color: var(--card-background-color);\n        max-height: 0px;\n        overflow: hidden;\n        transition: max-height 0.2s ease-out;\n      }\n      .wrapper {\n      }\n    `;\r\n    }\r\n    render() {\r\n        return html `\n      <div class=\"wrapper\">\n        <slot>Default details</slot>\n      </div>\n    `;\r\n    }\r\n};\r\nAlarmoCollabsibleBody = __decorate([\r\n    customElement('alarmo-collapsible-body')\r\n], AlarmoCollabsibleBody);\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts"]}
