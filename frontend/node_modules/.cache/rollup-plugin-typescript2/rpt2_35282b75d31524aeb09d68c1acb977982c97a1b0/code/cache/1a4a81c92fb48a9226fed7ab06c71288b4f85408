{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { navigate, computeEntity } from 'custom-card-helpers';\r\nimport { mdiClose } from '@mdi/js';\r\nimport { EAlarmEvent, } from '../../types';\r\nimport { handleError, isDefined, Unique, omit, showErrorDialog } from '../../helpers';\r\nimport { saveAutomation, fetchAreas, fetchConfig, deleteAutomation } from '../../data/websockets';\r\nimport { localize } from '../../../localize/localize';\r\nimport { computeEventDisplay, computeAreaDisplay, computeArmModeDisplay, getAreaOptions, getArmModeOptions, getAutomationEntities, computeEntityDisplay, isValidString, isValidEntity, isValidService, isObject, isString, isArray, computeActions, computeActionDisplay, computeMergedActions, findMatchingAction, } from '../../data/actions';\r\nimport { EAutomationTypes } from '../../const';\r\nimport { exportPath } from '../../common/navigation';\r\nimport { loadHaYamlEditor } from '../../load-ha-elements';\r\nimport '../../components/alarmo-selector';\r\nimport '../../components/alarmo-select';\r\nvar ViewMode;\r\n(function (ViewMode) {\r\n    ViewMode[ViewMode[\"Yaml\"] = 0] = \"Yaml\";\r\n    ViewMode[ViewMode[\"UI\"] = 1] = \"UI\";\r\n})(ViewMode || (ViewMode = {}));\r\nlet AutomationEditorCard = class AutomationEditorCard extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.config = {\r\n            type: EAutomationTypes.Action,\r\n            triggers: [{}],\r\n            actions: [{}],\r\n        };\r\n        this.viewMode = ViewMode.UI;\r\n        this.errors = {};\r\n    }\r\n    async firstUpdated() {\r\n        await loadHaYamlEditor();\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.alarmoConfig = await fetchConfig(this.hass);\r\n        if (this.item) {\r\n            let actions = this.item.actions.map(e => (e.entity_id ? e : omit(e, 'entity_id')));\r\n            this.config = Object.assign(Object.assign({}, this.item), { actions: [actions[0], ...actions.slice(1)] });\r\n            if (this.config.triggers.length > 1)\r\n                this.config = Object.assign(Object.assign({}, this.config), { triggers: [this.config.triggers[0]] });\r\n            let area = this.config.triggers[0].area;\r\n            if (isDefined(area) && !getAreaOptions(this.areas, this.alarmoConfig).includes(area))\r\n                area = undefined;\r\n            else if (area === null)\r\n                area = 0;\r\n            this._setArea(new CustomEvent('value-changed', { detail: { value: area } }));\r\n            if (this._hasCustomEntities())\r\n                this.viewMode = ViewMode.Yaml;\r\n        }\r\n        //automatically set area if there is only 1 option\r\n        if (!isDefined(this.config.triggers[0].area)) {\r\n            const areaOptions = getAreaOptions(this.areas, this.alarmoConfig);\r\n            if (areaOptions.length == 1)\r\n                this._setArea(new CustomEvent('value-changed', { detail: { value: areaOptions[0] } }));\r\n            else if (areaOptions.includes(0))\r\n                this._setArea(new CustomEvent('value-changed', { detail: { value: 0 } }));\r\n        }\r\n        if (this.item && !this.config.triggers[0].area && !this.alarmoConfig.master.enabled)\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { area: true });\r\n    }\r\n    render() {\r\n        var _a;\r\n        if (!this.hass || !this.areas || !this.alarmoConfig)\r\n            return html ``;\r\n        return html `\r\n      <div class=\"heading\">\r\n        <ha-icon-button .path=${mdiClose} @click=${this._cancelClick} class=\"icon\"></ha-icon-button>\r\n        <div class=\"header\">${localize('panels.actions.cards.new_action.title', this.hass.language)}</div>\r\n        <div class=\"description\">${localize('panels.actions.cards.new_action.description', this.hass.language)}</div>\r\n      </div>\r\n      <div class=\"section-header\">${localize('panels.actions.cards.new_notification.trigger', this.hass.language)}</div>\r\n      <ha-card>\r\n        <div class=\"card-content\">\r\n          <settings-row .narrow=${this.narrow} .large=${true} first>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.actions.cards.new_action.fields.event.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.actions.cards.new_action.fields.event.description', this.hass.language)}\r\n            </span>\r\n\r\n            <alarmo-select\r\n              .hass=${this.hass}\r\n              .items=${Object.values(EAlarmEvent).map(e => computeEventDisplay(e, this.hass))}\r\n              label=${localize('panels.actions.cards.new_action.fields.event.heading', this.hass.language)}\r\n              icons=${true}\r\n              .value=${this.config.triggers[0].event}\r\n              @value-changed=${this._setEvent}\r\n              ?invalid=${this.errors.event}\r\n            ></alarmo-select>\r\n          </settings-row>\r\n\r\n          ${Object.keys(this.areas).length > 1\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow} .large=${true}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.actions.cards.new_action.fields.area.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.actions.cards.new_action.fields.area.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <alarmo-select\r\n                    .hass=${this.hass}\r\n                    .items=${getAreaOptions(this.areas, this.alarmoConfig).map(e => computeAreaDisplay(e, this.areas, this.alarmoConfig))}\r\n                    clearable=${true}\r\n                    label=${localize('panels.actions.cards.new_action.fields.area.heading', this.hass.language)}\r\n                    .value=${this.config.triggers[0].area}\r\n                    @value-changed=${this._setArea}\r\n                    ?invalid=${this.errors.area}\r\n                  ></alarmo-select>\r\n                </settings-row>\r\n              `\r\n            : ''}\r\n\r\n          <settings-row .narrow=${this.narrow} .large=${true} last>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.actions.cards.new_notification.fields.mode.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.actions.cards.new_notification.fields.mode.description', this.hass.language)}\r\n            </span>\r\n\r\n            <alarmo-selector\r\n              .hass=${this.hass}\r\n              .items=${getArmModeOptions(this.config.triggers[0].area, this.areas).map(e => computeArmModeDisplay(e, this.hass))}\r\n              label=${localize('panels.actions.cards.new_action.fields.mode.heading', this.hass.language)}\r\n              .value=${this.config.triggers[0].modes || []}\r\n              @value-changed=${this._setModes}\r\n              ?invalid=${this.errors.modes}\r\n            ></alarmo-selector>\r\n          </settings-row>\r\n        </div>\r\n      </ha-card>\r\n\r\n      <div class=\"section-header\">${localize('panels.actions.cards.new_notification.action', this.hass.language)}</div>\r\n      <ha-card>\r\n        <div class=\"card-content\">\r\n          ${this.viewMode == ViewMode.UI\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow} .large=${true} first>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.actions.cards.new_action.fields.entity.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.actions.cards.new_action.fields.entity.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <alarmo-selector\r\n                    .hass=${this.hass}\r\n                    .items=${computeEntityDisplay(getAutomationEntities(this.hass, this._getEntities()), this.hass)}\r\n                    ?disabled=${!getAutomationEntities(this.hass, this._getEntities()).length}\r\n                    label=${localize('panels.actions.cards.new_action.fields.entity.heading', this.hass.language)}\r\n                    .value=${this._getEntities()}\r\n                    @value-changed=${this._setEntity}\r\n                    ?invalid=${this.errors.entity_id}\r\n                  ></alarmo-selector>\r\n                </settings-row>\r\n\r\n                ${this._getEntities().length\r\n                ? html `\r\n                      <settings-row .narrow=${this.narrow} .large=${true}>\r\n                        <span slot=\"heading\">\r\n                          ${localize('panels.actions.cards.new_action.fields.action.heading', this.hass.language)}\r\n                        </span>\r\n                        <span slot=\"description\">\r\n                          ${localize('panels.actions.cards.new_action.fields.action.description', this.hass.language)}\r\n                        </span>\r\n\r\n                        <div>\r\n                          ${this.renderActions() ||\r\n                    localize('panels.actions.cards.new_action.fields.action.no_common_actions', this.hass.language)}\r\n                        </div>\r\n                        ${this.errors.service\r\n                    ? html `\r\n                              <span class=\"error-message\">\r\n                                ${this.hass.localize('ui.common.error_required', this.hass.language)}\r\n                              </span>\r\n                            `\r\n                    : ''}\r\n                      </settings-row>\r\n                    `\r\n                : ''}\r\n              `\r\n            : html `\r\n                <h2>${localize('components.editor.edit_in_yaml', this.hass.language)}</h2>\r\n\r\n                <ha-yaml-editor\r\n                  .defaultValue=${this.config.actions || ''}\r\n                  @value-changed=${this._setYaml}\r\n                ></ha-yaml-editor>\r\n\r\n                ${this.errors.service || this.errors.entity_id\r\n                ? html `\r\n                      <span class=\"error-message\">\r\n                        ${this.hass.localize('ui.errors.config.key_missing', 'key', Object.entries(this.errors).find(([k, v]) => v && ['service', 'entity_id'].includes(k))[0])}\r\n                      </span>\r\n                    `\r\n                : ''}\r\n              `}\r\n        </div>\r\n\r\n        <div class=\"toggle-button\">\r\n          <mwc-button @click=${this._toggleYamlMode}>\r\n            <ha-icon icon=\"hass:shuffle-variant\"></ha-icon>\r\n            ${this.viewMode == ViewMode.Yaml\r\n            ? localize('components.editor.ui_mode', this.hass.language)\r\n            : localize('components.editor.yaml_mode', this.hass.language)}\r\n          </mwc-button>\r\n        </div>\r\n\r\n        <div class=\"card-actions\">\r\n          <mwc-button trailingIcon ?disabled=${!this._validAction()} @click=${this._testClick}>\r\n            ${localize('panels.actions.cards.new_notification.actions.test', this.hass.language)}\r\n            <ha-icon icon=\"hass:arrow-right\"></ha-icon>\r\n          </mwc-button>\r\n        </div>\r\n      </ha-card>\r\n\r\n      <div class=\"section-header\">${localize('panels.actions.cards.new_notification.options', this.hass.language)}</div>\r\n      <ha-card>\r\n        <div class=\"card-content\">\r\n          <settings-row .narrow=${this.narrow} .large=${true} first>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.actions.cards.new_action.fields.name.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.actions.cards.new_action.fields.name.description', this.hass.language)}\r\n            </span>\r\n\r\n            <ha-textfield\r\n              label=\"${localize('panels.actions.cards.new_action.fields.name.heading', this.hass.language)}\"\r\n              .placeholder=${this._namePlaceholder()}\r\n              .value=${this.config.name || ''}\r\n              @input=${this._setName}\r\n              ?invalid=${this.errors.name}\r\n            ></ha-textfield>\r\n          </settings-row>\r\n\r\n          ${((_a = this.item) === null || _a === void 0 ? void 0 : _a.automation_id) ? html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.actions.cards.new_notification.fields.delete.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.actions.cards.new_notification.fields.delete.description', this.hass.language)}\r\n                  </span>\r\n                  <div>\r\n                    <mwc-button class=\"warning\" outlined @click=${this._deleteClick}>\r\n                      <ha-icon icon=\"hass:trash-can-outline\"></ha-icon>\r\n                      ${this.hass.localize('ui.common.delete')}\r\n                    </mwc-button>\r\n                  </div>\r\n                </settings-row>\r\n              `\r\n            : ''}\r\n        </div>\r\n      </ha-card>\r\n\r\n      <div class=\"actions\">\r\n        <mwc-button raised @click=${this._saveClick} style=\"width: 100%\" class=\"save-button\">\r\n          <ha-icon icon=\"hass:content-save-outline\"></ha-icon>\r\n          ${this.hass.localize('ui.common.save')}\r\n        </mwc-button>\r\n      </div>\r\n    `;\r\n    }\r\n    renderActions() {\r\n        let selectedEntities = this.config.actions.map(e => e.entity_id);\r\n        let actions = computeActions(selectedEntities, this.hass);\r\n        if (!actions.length)\r\n            return;\r\n        const isMatchingAction = (...actions) => {\r\n            if (!actions.every(isDefined))\r\n                return false;\r\n            return Unique(computeMergedActions(actions.filter(isDefined))).length == 1;\r\n        };\r\n        return actions.map(action => {\r\n            return html `\r\n        <mwc-button\r\n          class=\"${isMatchingAction(this._selectedAction(), action) ? 'active' : ''}\"\r\n          @click=${() => this._setAction(action)}\r\n        >\r\n          ${computeActionDisplay(action, this.hass)}\r\n        </mwc-button>\r\n      `;\r\n        });\r\n    }\r\n    _selectedAction() {\r\n        let selectedActions = this.config.actions.map(e => e.service);\r\n        if (!selectedActions.every(isDefined))\r\n            return null;\r\n        selectedActions = Unique(computeMergedActions(selectedActions.filter(isDefined)));\r\n        if (selectedActions.length == 1)\r\n            return selectedActions[0];\r\n        else\r\n            return null;\r\n    }\r\n    _setEvent(ev) {\r\n        ev.stopPropagation();\r\n        const value = ev.detail.value;\r\n        let triggerConfig = this.config.triggers;\r\n        Object.assign(triggerConfig, { [0]: Object.assign(Object.assign({}, triggerConfig[0]), { event: value }) });\r\n        this.config = Object.assign(Object.assign({}, this.config), { triggers: triggerConfig });\r\n        if (Object.keys(this.errors).includes('event'))\r\n            this._validateConfig();\r\n    }\r\n    _setArea(ev) {\r\n        var _a;\r\n        ev.stopPropagation();\r\n        const value = ev.detail.value;\r\n        let triggerConfig = this.config.triggers;\r\n        Object.assign(triggerConfig, { [0]: Object.assign(Object.assign({}, triggerConfig[0]), { area: value }) });\r\n        const armModes = getArmModeOptions(value, this.areas);\r\n        if ((_a = triggerConfig[0].modes) === null || _a === void 0 ? void 0 : _a.length)\r\n            this._setModes(new CustomEvent('value-changed', {\r\n                detail: { value: triggerConfig[0].modes.filter(e => armModes.includes(e)) },\r\n            }));\r\n        this.config = Object.assign(Object.assign({}, this.config), { triggers: triggerConfig });\r\n        if (Object.keys(this.errors).includes('area'))\r\n            this._validateConfig();\r\n    }\r\n    _setModes(ev) {\r\n        ev.stopPropagation();\r\n        const value = ev.detail.value;\r\n        const triggerConfig = this.config.triggers;\r\n        Object.assign(triggerConfig, { [0]: Object.assign(Object.assign({}, triggerConfig[0]), { modes: value }) });\r\n        this.config = Object.assign(Object.assign({}, this.config), { triggers: triggerConfig });\r\n        if (Object.keys(this.errors).includes('service'))\r\n            this._validateConfig();\r\n    }\r\n    _setEntity(ev) {\r\n        ev.stopPropagation();\r\n        const selectedEntities = ev.detail.value;\r\n        let actionConfig = this.config.actions;\r\n        //assign service for added entity if it is in common\r\n        let serviceSetting = null;\r\n        if (selectedEntities.length > actionConfig.length && this._selectedAction())\r\n            serviceSetting = this._selectedAction();\r\n        if (actionConfig.length > selectedEntities.length) {\r\n            let removedAction = actionConfig.findIndex(e => !selectedEntities.includes(e.entity_id || ''));\r\n            if (removedAction < 0)\r\n                removedAction = actionConfig.length - 1;\r\n            actionConfig.splice(removedAction, 1);\r\n        }\r\n        if (!selectedEntities.length)\r\n            Object.assign(actionConfig, { [0]: omit(actionConfig[0], 'entity_id') });\r\n        selectedEntities.forEach((entity, i) => {\r\n            let action = actionConfig.length > i ? Object.assign({}, actionConfig[i]) : {};\r\n            action = action.entity_id == entity ? Object.assign({}, action) : { entity_id: entity };\r\n            Object.assign(actionConfig, { [i]: action });\r\n        });\r\n        this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n        if (serviceSetting)\r\n            this._setAction(serviceSetting);\r\n        if (Object.keys(this.errors).includes('entity_id'))\r\n            this._validateConfig();\r\n    }\r\n    _setAction(selectedAction) {\r\n        let actionConfig = this.config.actions;\r\n        let selectedEntities = this.config.actions.map(e => e.entity_id);\r\n        let availableActions = computeActions(selectedEntities, this.hass);\r\n        if (!availableActions.length)\r\n            return;\r\n        actionConfig.forEach((e, i) => {\r\n            let actions = computeActions(e.entity_id, this.hass);\r\n            let service = findMatchingAction(actions, selectedAction);\r\n            Object.assign(actionConfig, { [i]: Object.assign({ service: service }, omit(e, 'service')) });\r\n        });\r\n        this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n        if (Object.keys(this.errors).includes('service'))\r\n            this._validateConfig();\r\n    }\r\n    _setName(ev) {\r\n        ev.stopPropagation();\r\n        const value = ev.target.value;\r\n        this.config = Object.assign(Object.assign({}, this.config), { name: value });\r\n    }\r\n    _setYaml(ev) {\r\n        let value = ev.detail.value;\r\n        let actionConfig = [{}];\r\n        if (isObject(value))\r\n            value = [value];\r\n        if (isArray(value)) {\r\n            value.forEach((entry, i) => {\r\n                let output = {};\r\n                if (isObject(entry) && isString(entry.service))\r\n                    output = Object.assign(Object.assign({}, output), { service: entry.service });\r\n                if (isObject(entry) && isString(entry.entity_id))\r\n                    output = Object.assign(Object.assign({}, output), { entity_id: entry.entity_id });\r\n                if (isObject(entry) && isObject(entry.data))\r\n                    output = Object.assign(Object.assign({}, output), { data: entry.data });\r\n                Object.assign(actionConfig, { [i]: output });\r\n            });\r\n            this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n        }\r\n    }\r\n    _validateConfig() {\r\n        this.errors = {};\r\n        const data = this._parseAutomation();\r\n        const triggerConfig = data.triggers[0];\r\n        if (!triggerConfig.event || !Object.values(EAlarmEvent).includes(triggerConfig.event))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { event: true });\r\n        if (!isDefined(triggerConfig.area) || !getAreaOptions(this.areas, this.alarmoConfig).includes(triggerConfig.area))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { area: true });\r\n        if (!(triggerConfig.modes || []).every(e => getArmModeOptions(triggerConfig.area, this.areas).includes(e)))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { modes: true });\r\n        let entities = data.actions.map(e => e.entity_id);\r\n        if (this.viewMode == ViewMode.Yaml)\r\n            entities = entities.filter(isDefined);\r\n        if (!data.actions.length || !entities.every(e => isValidEntity(e, this.hass)))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { entity_id: true });\r\n        const services = data.actions.map(e => e.service).filter(isDefined);\r\n        if (!services.length || !services.every(e => isValidService(e, this.hass))) {\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { service: true });\r\n            let availableActions = computeActions(entities, this.hass);\r\n            if (!availableActions.length && services.length)\r\n                this.viewMode = ViewMode.Yaml;\r\n        }\r\n        if (!isValidString(data.name))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { name: true });\r\n        return !Object.values(this.errors).length;\r\n    }\r\n    _validAction() {\r\n        const data = this._parseAutomation();\r\n        const services = data.actions.map(e => e.service);\r\n        let entities = data.actions.map(e => e.entity_id);\r\n        if (this.viewMode == ViewMode.Yaml)\r\n            entities = entities.filter(isDefined);\r\n        return (services.length &&\r\n            services.every(e => isValidService(e, this.hass)) &&\r\n            entities.every(e => isValidEntity(e, this.hass)));\r\n    }\r\n    _toggleYamlMode() {\r\n        this.viewMode = this.viewMode == ViewMode.UI ? ViewMode.Yaml : ViewMode.UI;\r\n        if (this.viewMode == ViewMode.Yaml)\r\n            this.config = Object.assign(Object.assign({}, this.config), { actions: Object.assign(this.config.actions, {\r\n                    [0]: Object.assign(Object.assign({}, this.config.actions[0]), { service: this.config.actions[0].service || '', data: Object.assign({}, (this.config.actions[0].data || {})) }),\r\n                }) });\r\n    }\r\n    _namePlaceholder() {\r\n        var _a, _b, _c, _d;\r\n        if (!this._validAction)\r\n            return '';\r\n        const event = this.config.triggers[0].event;\r\n        const entities = this.config.actions.map(e => e.entity_id).filter(isDefined);\r\n        const entity = computeEntityDisplay(entities, this.hass)\r\n            .map(e => e.name)\r\n            .join(', ');\r\n        const services = Unique(this.config.actions\r\n            .map(e => e.service)\r\n            .filter(isDefined)\r\n            .map(e => computeEntity(e)));\r\n        let state = undefined;\r\n        if (services.length == 1 && ((_a = services[0]) === null || _a === void 0 ? void 0 : _a.includes('turn_on')))\r\n            state = this.hass.localize('state.default.on');\r\n        if (services.length == 1 && ((_b = services[0]) === null || _b === void 0 ? void 0 : _b.includes('turn_off')))\r\n            state = this.hass.localize('state.default.off');\r\n        if (services.length == 1 && ((_c = services[0]) === null || _c === void 0 ? void 0 : _c.includes('lock')))\r\n            state = this.hass.localize('component.lock.state._.locked');\r\n        if (services.length == 1 && ((_d = services[0]) === null || _d === void 0 ? void 0 : _d.includes('unlock')))\r\n            state = this.hass.localize('component.lock.state._.unlocked');\r\n        if (!event || !entity || !state)\r\n            return '';\r\n        else\r\n            return localize(`panels.actions.cards.new_action.fields.name.placeholders.${event}`, this.hass.language, 'entity', entity, 'state', state);\r\n    }\r\n    _getEntities() {\r\n        return Unique(this.config.actions.map(e => e.entity_id).filter(isDefined)) || [];\r\n    }\r\n    _hasCustomEntities() {\r\n        return this._getEntities().some(e => !getAutomationEntities(this.hass).includes(e));\r\n    }\r\n    _parseAutomation() {\r\n        let data = Object.assign({}, this.config);\r\n        //fill in name placeholder\r\n        if (!isValidString(data.name) && this._namePlaceholder())\r\n            data = Object.assign(Object.assign({}, data), { name: this._namePlaceholder() });\r\n        return data;\r\n    }\r\n    _saveClick(ev) {\r\n        if (!this._validateConfig())\r\n            return;\r\n        let data = this._parseAutomation();\r\n        //keep modes array empty if all modes are selected\r\n        if (getArmModeOptions(data.triggers[0].area, this.areas).every(e => { var _a; return (_a = data.triggers[0].modes) === null || _a === void 0 ? void 0 : _a.includes(e); })) {\r\n            data = Object.assign(Object.assign({}, data), { triggers: Object.assign(data.triggers, { [0]: Object.assign(Object.assign({}, data.triggers[0]), { modes: [] }) }) });\r\n        }\r\n        saveAutomation(this.hass, data)\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => this._cancelClick());\r\n    }\r\n    _deleteClick(ev) {\r\n        var _a;\r\n        if (!((_a = this.item) === null || _a === void 0 ? void 0 : _a.automation_id))\r\n            return;\r\n        deleteAutomation(this.hass, this.item.automation_id)\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => this._cancelClick());\r\n    }\r\n    _testClick(ev) {\r\n        const data = this._parseAutomation();\r\n        data.actions.forEach(action => {\r\n            const [domain, service] = action.service.split('.');\r\n            let serviceData = Object.assign({}, action.data);\r\n            if (action.entity_id)\r\n                serviceData = Object.assign(Object.assign({}, serviceData), { entity_id: action.entity_id });\r\n            this.hass\r\n                .callService(domain, service, serviceData)\r\n                .then()\r\n                .catch(e => {\r\n                showErrorDialog(ev, e.message);\r\n                return;\r\n            });\r\n        });\r\n    }\r\n    _cancelClick() {\r\n        navigate(this, exportPath('actions'), true);\r\n    }\r\n    static get styles() {\r\n        return css `\r\n      div.content {\r\n        padding: 28px 20px 0;\r\n        max-width: 1040px;\r\n        margin: 0 auto;\r\n        display: flex;\r\n        flex-direction: column;\r\n      }\r\n      div.header {\r\n        font-size: 24px;\r\n        font-weight: 400;\r\n        letter-spacing: -0.012em;\r\n        line-height: 32px;\r\n        opacity: var(--dark-primary-opacity);\r\n      }\r\n      div.section-header {\r\n        font-size: 18px;\r\n        font-weight: 400;\r\n        letter-spacing: -0.012em;\r\n        line-height: 32px;\r\n        opacity: var(--dark-primary-opacity);\r\n        margin: 20px 0px 5px 10px;\r\n      }\r\n      div.actions {\r\n        padding: 20px 0px 30px 0px;\r\n      }\r\n      mwc-button ha-icon {\r\n        margin-right: 6px;\r\n        --mdc-icon-size: 20px;\r\n      }\r\n      .toggle-button {\r\n        position: absolute;\r\n        right: 20px;\r\n        top: 20px;\r\n      }\r\n      h2 {\r\n        margin-top: 10px;\r\n        font-size: 24px;\r\n        font-weight: 400;\r\n        letter-spacing: -0.012em;\r\n      }\r\n      span.error-message {\r\n        color: var(--error-color);\r\n        font-size: 0.875rem;\r\n        display: flex;\r\n        margin-top: 10px;\r\n      }\r\n      mwc-button.warning {\r\n        --mdc-theme-primary: var(--error-color);\r\n      }\r\n      mwc-button.save-button {\r\n        --mdc-theme-primary: rgba(var(--rgb-primary-color), 0.8);\r\n      }\r\n      mwc-button.active {\r\n        background: var(--primary-color);\r\n        --mdc-theme-primary: var(--text-primary-color);\r\n        border-radius: 4px;\r\n      }\r\n      mwc-button[disabled].active {\r\n        background: var(--disabled-text-color);\r\n        --mdc-button-disabled-ink-color: var(--text-primary-color);\r\n      }\r\n      div.heading {\r\n        display: grid;\r\n        grid-template-areas:\r\n          'header icon'\r\n          'description icon';\r\n        grid-template-rows: 1fr 1fr;\r\n        grid-template-columns: 1fr 48px;\r\n        margin: 20px 0px 10px 10px;\r\n      }\r\n      div.heading .icon {\r\n        grid-area: icon;\r\n      }\r\n      div.heading .header {\r\n        grid-area: header;\r\n      }\r\n      div.heading .description {\r\n        grid-area: description;\r\n      }\r\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], AutomationEditorCard.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], AutomationEditorCard.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], AutomationEditorCard.prototype, \"config\", void 0);\r\n__decorate([\r\n    property()\r\n], AutomationEditorCard.prototype, \"item\", void 0);\r\n__decorate([\r\n    property()\r\n], AutomationEditorCard.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], AutomationEditorCard.prototype, \"alarmoConfig\", void 0);\r\n__decorate([\r\n    property()\r\n], AutomationEditorCard.prototype, \"viewMode\", void 0);\r\n__decorate([\r\n    property()\r\n], AutomationEditorCard.prototype, \"errors\", void 0);\r\nAutomationEditorCard = __decorate([\r\n    customElement('automation-editor-card')\r\n], AutomationEditorCard);\r\nexport { AutomationEditorCard };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/@mdi/js/mdi.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/types.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/helpers.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/websockets.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/actions.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/const.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/common/navigation.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/load-ha-elements.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-selector.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-select.ts"]}
