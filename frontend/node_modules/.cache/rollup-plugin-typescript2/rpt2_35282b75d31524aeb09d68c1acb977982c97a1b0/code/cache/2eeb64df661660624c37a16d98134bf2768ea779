{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\r\nimport { fireEvent } from 'custom-card-helpers';\r\nimport { mdiPencil } from '@mdi/js';\r\nimport { prettyPrint, sortAlphabetically } from '../../helpers';\r\nimport '../../components/settings-row.ts';\r\nimport '../../components/alarmo-table.ts';\r\nimport '../../dialogs/create-area-dialog';\r\nimport { commonStyle } from '../../styles';\r\nimport { localize } from '../../../localize/localize';\r\nimport { SubscribeMixin } from '../../subscribe-mixin';\r\nimport { fetchAreas, fetchSensors, fetchAutomations } from '../../data/websockets';\r\nimport { exportPath } from '../../common/navigation';\r\nlet AreaConfigCard = class AreaConfigCard extends SubscribeMixin(LitElement) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.areas = {};\r\n        this.sensors = {};\r\n        this.automations = {};\r\n    }\r\n    hassSubscribe() {\r\n        this._fetchData();\r\n        return [this.hass.connection.subscribeMessage(() => this._fetchData(), { type: 'alarmo_config_updated' })];\r\n    }\r\n    async _fetchData() {\r\n        if (!this.hass)\r\n            return;\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.sensors = await fetchSensors(this.hass);\r\n        this.automations = await fetchAutomations(this.hass);\r\n    }\r\n    render() {\r\n        if (!this.hass)\r\n            return html ``;\r\n        const areas = Object.values(this.areas);\r\n        areas.sort(sortAlphabetically);\r\n        const columns = {\r\n            actions: {\r\n                width: '48px',\r\n            },\r\n            name: {\r\n                title: this.hass.localize('ui.components.area-picker.add_dialog.name'),\r\n                width: '40%',\r\n                grow: true,\r\n                text: true,\r\n            },\r\n            remarks: {\r\n                title: localize('panels.general.cards.areas.table.remarks', this.hass.language),\r\n                width: '60%',\r\n                hide: this.narrow,\r\n                text: true,\r\n            },\r\n        };\r\n        const data = Object.values(areas).map(item => {\r\n            const sensors = Object.values(this.sensors).filter(e => e.area == item.area_id).length;\r\n            const automations = Object.values(areas).length == 1\r\n                ? Object.values(this.automations).filter(e => { var _a, _b; return ((_a = e.triggers) === null || _a === void 0 ? void 0 : _a.map(e => e.area).includes(item.area_id)) || !((_b = e.triggers) === null || _b === void 0 ? void 0 : _b.map(e => e.area).length); }).length\r\n                : Object.values(this.automations).filter(e => { var _a; return (_a = e.triggers) === null || _a === void 0 ? void 0 : _a.map(e => e.area).includes(item.area_id); }).length;\r\n            const summary_sensors = `<a href=\"${exportPath('sensors', { filter: { area: item.area_id } })}\">${localize('panels.general.cards.areas.table.summary_sensors', this.hass.language, 'number', sensors)}</a>`;\r\n            const summary_automations = `<a href=\"${exportPath('actions', { filter: { area: item.area_id } })}\">${localize('panels.general.cards.areas.table.summary_automations', this.hass.language, 'number', automations)}</a>`;\r\n            const output = {\r\n                id: item.area_id,\r\n                actions: html `\n          <ha-icon-button @click=${(ev) => this.editClick(ev, item.area_id)} .path=${mdiPencil}></ha-icon-button>\n        `,\r\n                name: prettyPrint(item.name),\r\n                remarks: unsafeHTML(localize('panels.general.cards.areas.table.summary', this.hass.language, 'summary_sensors', summary_sensors, 'summary_automations', summary_automations)),\r\n            };\r\n            return output;\r\n        });\r\n        return html `\n      <ha-card header=\"${localize('panels.general.cards.areas.title', this.hass.language)}\">\n        <div class=\"card-content\">\n          ${localize('panels.general.cards.areas.description', this.hass.language)}\n        </div>\n\n        <alarmo-table .columns=${columns} .data=${data}>\n          ${localize('panels.general.cards.areas.no_items', this.hass.language)}\n        </alarmo-table>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this.addClick}>\n            ${localize('panels.general.cards.areas.actions.add', this.hass.language)}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\r\n    }\r\n    addClick(ev) {\r\n        const element = ev.target;\r\n        fireEvent(element, 'show-dialog', {\r\n            dialogTag: 'create-area-dialog',\r\n            dialogImport: () => import('../../dialogs/create-area-dialog'),\r\n            dialogParams: {},\r\n        });\r\n    }\r\n    editClick(ev, area_id) {\r\n        const element = ev.target;\r\n        fireEvent(element, 'show-dialog', {\r\n            dialogTag: 'create-area-dialog',\r\n            dialogImport: () => import('../../dialogs/create-area-dialog'),\r\n            dialogParams: { area_id: area_id },\r\n        });\r\n    }\r\n};\r\nAreaConfigCard.styles = commonStyle;\r\n__decorate([\r\n    property()\r\n], AreaConfigCard.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], AreaConfigCard.prototype, \"path\", void 0);\r\n__decorate([\r\n    property()\r\n], AreaConfigCard.prototype, \"config\", void 0);\r\n__decorate([\r\n    property()\r\n], AreaConfigCard.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], AreaConfigCard.prototype, \"sensors\", void 0);\r\n__decorate([\r\n    property()\r\n], AreaConfigCard.prototype, \"automations\", void 0);\r\nAreaConfigCard = __decorate([\r\n    customElement('area-config-card')\r\n], AreaConfigCard);\r\nexport { AreaConfigCard };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/directives/unsafe-html.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/@mdi/js/mdi.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/helpers.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/types.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/dialogs/create-area-dialog.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/styles.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/subscribe-mixin.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/home-assistant-js-websocket/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/websockets.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-table.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/common/navigation.ts"]}
