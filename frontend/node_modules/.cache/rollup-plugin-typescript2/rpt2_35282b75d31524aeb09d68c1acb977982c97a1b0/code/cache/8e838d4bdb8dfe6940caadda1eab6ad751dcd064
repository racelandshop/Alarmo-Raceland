{"code":"import { __decorate } from \"tslib\";\r\nimport { LitElement, html, css } from 'lit';\r\nimport { property, customElement } from 'lit/decorators.js';\r\nimport { navigate, computeDomain } from 'custom-card-helpers';\r\nimport { mdiClose } from '@mdi/js';\r\nimport { EAlarmEvent, } from '../../types';\r\nimport { handleError, omit, showErrorDialog, isDefined, computeName } from '../../helpers';\r\nimport { saveAutomation, fetchAreas, fetchConfig, deleteAutomation } from '../../data/websockets';\r\nimport { localize } from '../../../localize/localize';\r\nimport { computeEventDisplay, computeAreaDisplay, computeArmModeDisplay, getAreaOptions, getArmModeOptions, computeServiceDisplay, getNotifyServices, getWildcardOptions, isValidString, isString, isObject, getOpenSensorsWildCardOptions, getArmModeWildCardOptions, computeEntityDisplay, getMediaPlayerEntities, } from '../../data/actions';\r\nimport { EAutomationTypes } from '../../const';\r\nimport { exportPath } from '../../common/navigation';\r\nimport { loadHaYamlEditor } from '../../load-ha-elements';\r\nimport '../../components/alarmo-selector';\r\nimport '../../components/alarmo-select';\r\nimport '../../components/alarmo-chip-set';\r\nvar ViewMode;\r\n(function (ViewMode) {\r\n    ViewMode[ViewMode[\"Yaml\"] = 0] = \"Yaml\";\r\n    ViewMode[ViewMode[\"UI\"] = 1] = \"UI\";\r\n})(ViewMode || (ViewMode = {}));\r\nlet NotificationEditorCard = class NotificationEditorCard extends LitElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.config = {\r\n            type: EAutomationTypes.Notification,\r\n            triggers: [{}],\r\n            actions: [{}],\r\n        };\r\n        this.viewMode = ViewMode.UI;\r\n        this.errors = {};\r\n    }\r\n    async firstUpdated() {\r\n        await loadHaYamlEditor();\r\n        this.areas = await fetchAreas(this.hass);\r\n        this.alarmoConfig = await fetchConfig(this.hass);\r\n        if (this.item) {\r\n            let actions = this.item.actions.map(e => omit(e, 'entity_id'));\r\n            this.config = Object.assign(Object.assign({}, this.item), { actions: [actions[0], ...actions.slice(1)] });\r\n            if (this.config.triggers.length > 1)\r\n                this.config = Object.assign(Object.assign({}, this.config), { triggers: [this.config.triggers[0]] });\r\n            let area = this.config.triggers[0].area;\r\n            if (isDefined(area) && !getAreaOptions(this.areas, this.alarmoConfig).includes(area))\r\n                area = undefined;\r\n            else if (area === null)\r\n                area = 0;\r\n            this._setArea(new CustomEvent('value-changed', { detail: { value: area } }));\r\n        }\r\n        //automatically set area if there is only 1 option\r\n        if (!isDefined(this.config.triggers[0].area)) {\r\n            const areaOptions = getAreaOptions(this.areas, this.alarmoConfig);\r\n            if (areaOptions.length == 1)\r\n                this._setArea(new CustomEvent('value-changed', { detail: { value: areaOptions[0] } }));\r\n            else if (areaOptions.includes(0))\r\n                this._setArea(new CustomEvent('value-changed', { detail: { value: 0 } }));\r\n        }\r\n    }\r\n    render() {\r\n        var _a, _b, _c, _d;\r\n        if (!this.hass || !this.areas || !this.alarmoConfig)\r\n            return html ``;\r\n        return html `\r\n      <div class=\"heading\">\r\n        <ha-icon-button .path=${mdiClose} @click=${this._cancelClick} class=\"icon\"></ha-icon-button>\r\n        <div class=\"header\">${localize('panels.actions.cards.new_notification.title', this.hass.language)}</div>\r\n        <div class=\"description\">\r\n          ${localize('panels.actions.cards.new_notification.description', this.hass.language)}\r\n        </div>\r\n      </div>\r\n      <div class=\"section-header\">${localize('panels.actions.cards.new_notification.trigger', this.hass.language)}</div>\r\n      <ha-card>\r\n        <div class=\"card-content\">\r\n          <settings-row .narrow=${this.narrow} .large=${true} first>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.actions.cards.new_notification.fields.event.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.actions.cards.new_notification.fields.event.description', this.hass.language)}\r\n            </span>\r\n\r\n            <alarmo-select\r\n              .hass=${this.hass}\r\n              .items=${Object.values(EAlarmEvent).map(e => computeEventDisplay(e, this.hass))}\r\n              label=${localize('panels.actions.cards.new_action.fields.event.heading', this.hass.language)}\r\n              icons=${true}\r\n              .value=${this.config.triggers[0].event}\r\n              @value-changed=${this._setEvent}\r\n              ?invalid=${this.errors.event}\r\n            ></alarmo-select>\r\n          </settings-row>\r\n\r\n          ${Object.keys(this.areas).length > 1\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow} .large=${true}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.actions.cards.new_action.fields.area.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.actions.cards.new_action.fields.area.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <alarmo-select\r\n                    .hass=${this.hass}\r\n                    .items=${getAreaOptions(this.areas, this.alarmoConfig).map(e => computeAreaDisplay(e, this.areas, this.alarmoConfig))}\r\n                    clearable=${true}\r\n                    label=${localize('panels.actions.cards.new_action.fields.area.heading', this.hass.language)}\r\n                    .value=${this.config.triggers[0].area}\r\n                    @value-changed=${this._setArea}\r\n                    ?invalid=${this.errors.area || (!this.config.triggers[0].area && !this.alarmoConfig.master.enabled)}\r\n                  ></alarmo-select>\r\n                </settings-row>\r\n              `\r\n            : ''}\r\n\r\n          <settings-row .narrow=${this.narrow} .large=${true} last>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.actions.cards.new_notification.fields.mode.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.actions.cards.new_notification.fields.mode.description', this.hass.language)}\r\n            </span>\r\n\r\n            <alarmo-selector\r\n              .hass=${this.hass}\r\n              .items=${getArmModeOptions(this.config.triggers[0].area, this.areas).map(e => computeArmModeDisplay(e, this.hass))}\r\n              label=${localize('panels.actions.cards.new_action.fields.mode.heading', this.hass.language)}\r\n              .value=${this.config.triggers[0].modes || []}\r\n              @value-changed=${this._setModes}\r\n              ?invalid=${this.errors.modes}\r\n            ></alarmo-selector>\r\n          </settings-row>\r\n        </div>\r\n      </ha-card>\r\n\r\n      <div class=\"section-header\">${localize('panels.actions.cards.new_notification.action', this.hass.language)}</div>\r\n      <ha-card>\r\n        <div class=\"card-content\">\r\n          ${this.viewMode == ViewMode.UI\r\n            ? html `\r\n                <settings-row .narrow=${this.narrow} .large=${true} first>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.actions.cards.new_notification.fields.target.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.actions.cards.new_notification.fields.target.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <alarmo-select\r\n                    .hass=${this.hass}\r\n                    .items=${computeServiceDisplay(this.hass, ...getNotifyServices(this.hass))}\r\n                    ?disabled=${!getNotifyServices(this.hass).length}\r\n                    label=${localize('panels.actions.cards.new_notification.fields.target.heading', this.hass.language)}\r\n                    icons=${true}\r\n                    .value=${this.config.actions[0].service}\r\n                    @value-changed=${this._setService}\r\n                    ?invalid=${this.errors.service}\r\n                    allow-custom-value\r\n                  ></alarmo-select>\r\n                </settings-row>\r\n\r\n                ${!this.config.actions[0].service || computeDomain(this.config.actions[0].service) == 'notify'\r\n                ? html `\r\n                      <settings-row .narrow=${this.narrow}>\r\n                        <span slot=\"heading\">\r\n                          ${localize('panels.actions.cards.new_notification.fields.title.heading', this.hass.language)}\r\n                        </span>\r\n                        <span slot=\"description\">\r\n                          ${localize('panels.actions.cards.new_notification.fields.title.description', this.hass.language)}\r\n                        </span>\r\n\r\n                        <ha-textfield\r\n                          label=\"${localize('panels.actions.cards.new_notification.fields.title.heading', this.hass.language)}\"\r\n                          .value=${((_a = this.config.actions[0].data) === null || _a === void 0 ? void 0 : _a.title) || ''}\r\n                          @input=${this._setTitle}\r\n                          ?invalid=${this.errors.title}\r\n                        ></ha-textfield>\r\n                      </settings-row>\r\n                    `\r\n                : ''}\r\n                ${this.config.actions[0].service && computeDomain(this.config.actions[0].service) == 'tts'\r\n                ? html `\r\n                      <settings-row .narrow=${this.narrow} .large=${true} first>\r\n                        <span slot=\"heading\">\r\n                          ${localize('panels.actions.cards.new_action.fields.entity.heading', this.hass.language)}\r\n                        </span>\r\n                        <span slot=\"description\">\r\n                          ${localize('panels.actions.cards.new_action.fields.entity.description', this.hass.language)}\r\n                        </span>\r\n\r\n                        <alarmo-select\r\n                          .items=${computeEntityDisplay(getMediaPlayerEntities(this.hass), this.hass)}\r\n                          label=${localize('panels.actions.cards.new_action.fields.entity.heading', this.hass.language)}\r\n                          .value=${((_b = this.config.actions[0].data) === null || _b === void 0 ? void 0 : _b.entity_id) || ''}\r\n                          @value-changed=${this._setEntity}\r\n                          .icons=${true}\r\n                          ?invalid=${this.errors.entity}\r\n                        ></alarmo-select>\r\n                      </settings-row>\r\n                    `\r\n                : ''}\r\n\r\n                <settings-row .narrow=${this.narrow} .large=${true} last>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.actions.cards.new_notification.fields.message.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.actions.cards.new_notification.fields.message.description', this.hass.language)}\r\n                  </span>\r\n\r\n                  <ha-textarea\r\n                    id=\"message\"\r\n                    label=\"${localize('panels.actions.cards.new_notification.fields.message.heading', this.hass.language)}\"\r\n                    placeholder=${this._messagePlaceholder()}\r\n                    .value=${((_c = this.config.actions[0].data) === null || _c === void 0 ? void 0 : _c.message) || ''}\r\n                    @input=${(ev) => this._setMessage(ev.target.value)}\r\n                    ?invalid=${this.errors.message}\r\n                  ></ha-textarea>\r\n\r\n                  ${this.config.triggers[0].event\r\n                ? html `\r\n                        <div style=\"margin-top: 10px\">\r\n                          <span style=\"padding-right: 10px\">\r\n                            ${localize('panels.actions.cards.new_notification.fields.message.insert_wildcard', this.hass.language)}:\r\n                          </span>\r\n                          <alarmo-chip-set\r\n                            .items=${getWildcardOptions(this.config.triggers[0].event, this.alarmoConfig)}\r\n                            @value-changed=${(ev) => this._insertWildCard(ev.detail)}\r\n                          ></alarmo-chip-set>\r\n                        </div>\r\n                      `\r\n                : ''}\r\n                </settings-row>\r\n\r\n                ${this._getOpenSensorsFormat() !== null\r\n                ? html `\r\n                      <settings-row .narrow=${this.narrow} .large=${true}>\r\n                        <span slot=\"heading\">\r\n                          ${localize('panels.actions.cards.new_notification.fields.open_sensors_format.heading', this.hass.language)}\r\n                        </span>\r\n\r\n                        <span slot=\"description\">\r\n                          ${localize('panels.actions.cards.new_notification.fields.open_sensors_format.description', this.hass.language)}\r\n                        </span>\r\n\r\n                        <alarmo-select\r\n                          .items=${getOpenSensorsWildCardOptions(this.hass)}\r\n                          .value=${this._getOpenSensorsFormat(true)}\r\n                          @value-changed=${this._setOpenSensorsFormat}\r\n                        ></alarmo-select>\r\n                      </settings-row>\r\n                    `\r\n                : ''}\r\n                ${this._getArmModeFormat() !== null &&\r\n                (getArmModeWildCardOptions(this.hass).length > 1 ||\r\n                    (getArmModeWildCardOptions(this.hass).length == 1 &&\r\n                        getArmModeWildCardOptions(this.hass)[0].value != this._getArmModeFormat()))\r\n                ? html `\r\n                      <settings-row .narrow=${this.narrow} .large=${true}>\r\n                        <span slot=\"heading\">\r\n                          ${localize('panels.actions.cards.new_notification.fields.arm_mode_format.heading', this.hass.language)}\r\n                        </span>\r\n\r\n                        <span slot=\"description\">\r\n                          ${localize('panels.actions.cards.new_notification.fields.arm_mode_format.description', this.hass.language)}\r\n                        </span>\r\n\r\n                        <alarmo-select\r\n                          .items=${getArmModeWildCardOptions(this.hass)}\r\n                          .value=${this._getArmModeFormat(true)}\r\n                          @value-changed=${this._setArmModeFormat}\r\n                        ></alarmo-select>\r\n                      </settings-row>\r\n                    `\r\n                : ''}\r\n              `\r\n            : html `\r\n                <h2>${localize('components.editor.edit_in_yaml', this.hass.language)}</h2>\r\n\r\n                <ha-yaml-editor\r\n                  .defaultValue=${this.config.actions[0] || ''}\r\n                  @value-changed=${this._setYaml}\r\n                ></ha-yaml-editor>\r\n\r\n                ${this.errors.service || this.errors.title || this.errors.message\r\n                ? html `\r\n                      <span class=\"error-message\">\r\n                        ${this.hass.localize('ui.errors.config.key_missing', 'key', Object.entries(this.errors).find(([k, v]) => v && ['service', 'title', 'message', 'entity'].includes(k))[0])}\r\n                      </span>\r\n                    `\r\n                : ''}\r\n              `}\r\n        </div>\r\n\r\n        <div class=\"toggle-button\">\r\n          <mwc-button @click=${this._toggleYamlMode}>\r\n            <ha-icon icon=\"hass:shuffle-variant\"></ha-icon>\r\n            ${this.viewMode == ViewMode.Yaml\r\n            ? localize('components.editor.ui_mode', this.hass.language)\r\n            : localize('components.editor.yaml_mode', this.hass.language)}\r\n          </mwc-button>\r\n        </div>\r\n\r\n        <div class=\"card-actions\">\r\n          <mwc-button trailingIcon ?disabled=${!this._validAction()} @click=${this._testClick}>\r\n            ${localize('panels.actions.cards.new_notification.actions.test', this.hass.language)}\r\n            <ha-icon icon=\"hass:arrow-right\"></ha-icon>\r\n          </mwc-button>\r\n        </div>\r\n      </ha-card>\r\n\r\n      <div class=\"section-header\">${localize('panels.actions.cards.new_notification.options', this.hass.language)}</div>\r\n      <ha-card>\r\n        <div class=\"card-content\">\r\n          <settings-row .narrow=${this.narrow} .large=${true} first>\r\n            <span slot=\"heading\">\r\n              ${localize('panels.actions.cards.new_notification.fields.name.heading', this.hass.language)}\r\n            </span>\r\n            <span slot=\"description\">\r\n              ${localize('panels.actions.cards.new_notification.fields.name.description', this.hass.language)}\r\n            </span>\r\n\r\n            <ha-textfield\r\n              label=\"${localize('panels.actions.cards.new_notification.fields.name.heading', this.hass.language)}\"\r\n              .placeholder=${this._namePlaceholder()}\r\n              .value=${this.config.name || ''}\r\n              @input=${this._setName}\r\n              ?invalid=${this.errors.name}\r\n            ></ha-textfield>\r\n          </settings-row>\r\n\r\n          ${((_d = this.item) === null || _d === void 0 ? void 0 : _d.automation_id) ? html `\r\n                <settings-row .narrow=${this.narrow}>\r\n                  <span slot=\"heading\">\r\n                    ${localize('panels.actions.cards.new_notification.fields.delete.heading', this.hass.language)}\r\n                  </span>\r\n                  <span slot=\"description\">\r\n                    ${localize('panels.actions.cards.new_notification.fields.delete.description', this.hass.language)}\r\n                  </span>\r\n                  <div>\r\n                    <mwc-button class=\"warning\" outlined @click=${this._deleteClick}>\r\n                      <ha-icon icon=\"hass:trash-can-outline\"></ha-icon>\r\n                      ${this.hass.localize('ui.common.delete')}\r\n                    </mwc-button>\r\n                  </div>\r\n                </settings-row>\r\n              `\r\n            : ''}\r\n        </div>\r\n      </ha-card>\r\n\r\n      <div class=\"actions\">\r\n        <mwc-button raised @click=${this._saveClick} style=\"width: 100%\" class=\"save-button\">\r\n          <ha-icon icon=\"hass:content-save-outline\"></ha-icon>\r\n          ${this.hass.localize('ui.common.save')}\r\n        </mwc-button>\r\n      </div>\r\n    `;\r\n    }\r\n    _setEvent(ev) {\r\n        ev.stopPropagation();\r\n        const value = ev.detail.value;\r\n        let triggerConfig = this.config.triggers;\r\n        Object.assign(triggerConfig, { [0]: Object.assign(Object.assign({}, triggerConfig[0]), { event: value }) });\r\n        this.config = Object.assign(Object.assign({}, this.config), { triggers: triggerConfig });\r\n        if (Object.keys(this.errors).includes('event'))\r\n            this._validateConfig();\r\n    }\r\n    _setArea(ev) {\r\n        var _a;\r\n        ev.stopPropagation();\r\n        const value = ev.detail.value;\r\n        let triggerConfig = this.config.triggers;\r\n        Object.assign(triggerConfig, { [0]: Object.assign(Object.assign({}, triggerConfig[0]), { area: value }) });\r\n        const armModes = getArmModeOptions(value, this.areas);\r\n        if ((_a = triggerConfig[0].modes) === null || _a === void 0 ? void 0 : _a.length)\r\n            this._setModes(new CustomEvent('value-changed', {\r\n                detail: { value: triggerConfig[0].modes.filter(e => armModes.includes(e)) },\r\n            }));\r\n        this.config = Object.assign(Object.assign({}, this.config), { triggers: triggerConfig });\r\n        if (Object.keys(this.errors).includes('area'))\r\n            this._validateConfig();\r\n    }\r\n    _setModes(ev) {\r\n        ev.stopPropagation();\r\n        const value = ev.detail.value;\r\n        let triggerConfig = this.config.triggers;\r\n        Object.assign(triggerConfig, { [0]: Object.assign(Object.assign({}, triggerConfig[0]), { modes: value }) });\r\n        this.config = Object.assign(Object.assign({}, this.config), { triggers: triggerConfig });\r\n        if (Object.keys(this.errors).includes('modes'))\r\n            this._validateConfig();\r\n    }\r\n    _setService(ev) {\r\n        ev.stopPropagation();\r\n        const value = String(ev.detail.value);\r\n        let actionConfig = this.config.actions;\r\n        Object.assign(actionConfig, { [0]: Object.assign(Object.assign(Object.assign({}, actionConfig[0]), { service: value }), omit(actionConfig[0], 'service')) });\r\n        if ((actionConfig[0].data || {}).entity_id && computeDomain(value) == 'notify')\r\n            Object.assign(actionConfig, {\r\n                [0]: Object.assign(Object.assign({}, actionConfig[0]), { data: omit(actionConfig[0].data || {}, 'entity_id') }),\r\n            });\r\n        this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n        if (Object.keys(this.errors).includes('service'))\r\n            this._validateConfig();\r\n    }\r\n    _setTitle(ev) {\r\n        ev.stopPropagation();\r\n        const value = ev.target.value;\r\n        let actionConfig = this.config.actions;\r\n        Object.assign(actionConfig, {\r\n            [0]: Object.assign(Object.assign({}, actionConfig[0]), { service: actionConfig[0].service || '', data: Object.assign(Object.assign({}, (actionConfig[0].data || {})), { title: value }) }),\r\n        });\r\n        this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n        if (Object.keys(this.errors).includes('title'))\r\n            this._validateConfig();\r\n    }\r\n    _setEntity(ev) {\r\n        ev.stopPropagation();\r\n        const value = ev.target.value;\r\n        let actionConfig = this.config.actions;\r\n        Object.assign(actionConfig, {\r\n            [0]: Object.assign(Object.assign({}, actionConfig[0]), { service: actionConfig[0].service || '', data: Object.assign(Object.assign({}, (actionConfig[0].data || {})), { entity_id: value }) }),\r\n        });\r\n        this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n        if (Object.keys(this.errors).includes('entity'))\r\n            this._validateConfig();\r\n    }\r\n    _setMessage(value) {\r\n        let actionConfig = this.config.actions;\r\n        Object.assign(actionConfig, {\r\n            [0]: Object.assign(Object.assign({}, actionConfig[0]), { service: actionConfig[0].service || '', data: Object.assign(Object.assign({}, (actionConfig[0].data || {})), { message: value }) }),\r\n        });\r\n        this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n        if (Object.keys(this.errors).includes('message'))\r\n            this._validateConfig();\r\n    }\r\n    _setName(ev) {\r\n        ev.stopPropagation();\r\n        const value = ev.target.value;\r\n        this.config = Object.assign(Object.assign({}, this.config), { name: value });\r\n    }\r\n    _setYaml(ev) {\r\n        const value = ev.detail.value;\r\n        let output = {};\r\n        if (isString(value === null || value === void 0 ? void 0 : value.service))\r\n            output = Object.assign(Object.assign({}, output), { service: String(value.service) });\r\n        if (isObject(value === null || value === void 0 ? void 0 : value.data))\r\n            output = Object.assign(Object.assign({}, output), { data: value.data });\r\n        if (Object.keys(output).length)\r\n            this.config = Object.assign(Object.assign({}, this.config), { actions: Object.assign(this.config.actions, { [0]: Object.assign(Object.assign({}, this.config.actions[0]), output) }) });\r\n        if (Object.keys(this.errors).some(e => ['service', 'message', 'title'].includes(e)))\r\n            this._validateConfig();\r\n    }\r\n    _validateConfig() {\r\n        var _a;\r\n        this.errors = {};\r\n        const data = this._parseAutomation();\r\n        const triggerConfig = data.triggers[0];\r\n        if (!triggerConfig.event || !Object.values(EAlarmEvent).includes(triggerConfig.event))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { event: true });\r\n        if (!isDefined(triggerConfig.area) || !getAreaOptions(this.areas, this.alarmoConfig).includes(triggerConfig.area))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { area: true });\r\n        if (!(triggerConfig.modes || []).every(e => getArmModeOptions(triggerConfig.area, this.areas).includes(e)))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { modes: true });\r\n        const actionConfig = data.actions[0];\r\n        if (!actionConfig.service ||\r\n            (!getNotifyServices(this.hass).includes(actionConfig.service) && computeDomain(actionConfig.service) != 'script'))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { service: true });\r\n        else if (actionConfig.service &&\r\n            computeDomain(actionConfig.service) == 'tts' &&\r\n            (!Object.keys(actionConfig.data || {}).includes('entity_id') ||\r\n                !getMediaPlayerEntities(this.hass).includes(actionConfig.data.entity_id)))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { entity: true });\r\n        if (!isValidString((_a = actionConfig.data) === null || _a === void 0 ? void 0 : _a.message))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { message: true });\r\n        // title is optional\r\n        // if (!isValidString(actionConfig.data?.title))\r\n        //   this.errors = { ...this.errors, title: true };\r\n        if (!isValidString(data.name))\r\n            this.errors = Object.assign(Object.assign({}, this.errors), { name: true });\r\n        return !Object.values(this.errors).length;\r\n    }\r\n    _validAction() {\r\n        var _a;\r\n        const data = this._parseAutomation();\r\n        const actionConfig = data.actions[0];\r\n        return (actionConfig.service &&\r\n            (computeDomain(actionConfig.service) == 'script' ||\r\n                getNotifyServices(this.hass).includes(actionConfig.service)) &&\r\n            isValidString((_a = actionConfig.data) === null || _a === void 0 ? void 0 : _a.message));\r\n    }\r\n    _insertWildCard(value) {\r\n        var _a;\r\n        const field = this.shadowRoot.querySelector('#message');\r\n        if (field)\r\n            field.focus();\r\n        let message = ((_a = this.config.actions[0].data) === null || _a === void 0 ? void 0 : _a.message) || '';\r\n        message =\r\n            field && field.selectionStart !== null && field.selectionEnd !== null\r\n                ? message.substring(0, field.selectionStart) + value + message.substring(field.selectionEnd, message.length)\r\n                : message + value;\r\n        this._setMessage(message);\r\n    }\r\n    _toggleYamlMode() {\r\n        this.viewMode = this.viewMode == ViewMode.UI ? ViewMode.Yaml : ViewMode.UI;\r\n        if (this.viewMode == ViewMode.Yaml) {\r\n            let actionConfig = Object.assign({}, this.config.actions[0]);\r\n            let serviceData = typeof actionConfig.data == 'object' && isDefined(actionConfig.data) ? actionConfig.data : {};\r\n            actionConfig = Object.assign(Object.assign({}, actionConfig), { service: actionConfig.service || '' });\r\n            if (!serviceData.message)\r\n                serviceData = Object.assign(Object.assign({}, serviceData), { message: '' });\r\n            if (getNotifyServices(this.hass).includes(actionConfig.service)) {\r\n                if (computeDomain(actionConfig.service) == 'notify' && !serviceData.title)\r\n                    serviceData = Object.assign(Object.assign({}, serviceData), { title: '' });\r\n                if (computeDomain(actionConfig.service) == 'tts' && !serviceData.entity_id)\r\n                    serviceData = Object.assign(Object.assign({}, serviceData), { entity_id: '' });\r\n            }\r\n            actionConfig = Object.assign(Object.assign({}, actionConfig), { data: serviceData });\r\n            this.config = Object.assign(Object.assign({}, this.config), { actions: Object.assign(this.config.actions, {\r\n                    [0]: actionConfig,\r\n                }) });\r\n        }\r\n    }\r\n    _namePlaceholder() {\r\n        const event = this.config.triggers[0].event;\r\n        const domain = this.config.actions[0].service ? computeDomain(this.config.actions[0].service) : null;\r\n        if (!event)\r\n            return '';\r\n        if (domain == 'notify') {\r\n            const target = computeServiceDisplay(this.hass, this.config.actions[0].service);\r\n            if (!target.length)\r\n                return '';\r\n            return localize(`panels.actions.cards.new_notification.fields.name.placeholders.${event}`, this.hass.language, '{target}', target[0].name);\r\n        }\r\n        else if (domain == 'tts') {\r\n            const entity = typeof this.config.actions[0].data == 'object' && isDefined(this.config.actions[0].data)\r\n                ? this.config.actions[0].data.entity_id\r\n                : null;\r\n            if (!entity || !this.hass.states[entity])\r\n                return '';\r\n            const target = computeName(this.hass.states[entity]);\r\n            return localize(`panels.actions.cards.new_notification.fields.name.placeholders.${event}`, this.hass.language, '{target}', target);\r\n        }\r\n        return '';\r\n    }\r\n    _messagePlaceholder() {\r\n        const event = this.config.triggers[0].event;\r\n        if (!event)\r\n            return '';\r\n        else\r\n            return localize(`panels.actions.cards.new_notification.fields.message.placeholders.${event}`, this.hass.language);\r\n    }\r\n    _parseAutomation() {\r\n        var _a;\r\n        let data = Object.assign({}, this.config);\r\n        let action = data.actions[0];\r\n        //fill in message placeholder\r\n        if (!isValidString((_a = action.data) === null || _a === void 0 ? void 0 : _a.message) && this.viewMode == ViewMode.UI && this._messagePlaceholder()) {\r\n            action = Object.assign(Object.assign({}, action), { data: Object.assign(Object.assign({}, action.data), { message: this._messagePlaceholder() }) });\r\n            Object.assign(data, { actions: Object.assign(data.actions, { [0]: action }) });\r\n        }\r\n        //fill in name placeholder\r\n        if (!isValidString(data.name) && this._namePlaceholder())\r\n            data = Object.assign(Object.assign({}, data), { name: this._namePlaceholder() });\r\n        return data;\r\n    }\r\n    _getOpenSensorsFormat(forceResult = false) {\r\n        var _a;\r\n        const message = ((_a = this.config.actions[0].data) === null || _a === void 0 ? void 0 : _a.message) || '';\r\n        const res = message.match(/{{open_sensors(\\|[^}]+)?}}/);\r\n        if (res !== null)\r\n            return res[0];\r\n        else\r\n            return forceResult ? '{{open_sensors}}' : null;\r\n    }\r\n    _setOpenSensorsFormat(ev) {\r\n        var _a;\r\n        ev.stopPropagation();\r\n        const value = String(ev.detail.value);\r\n        let message = ((_a = this.config.actions[0].data) === null || _a === void 0 ? void 0 : _a.message) || '';\r\n        message = message.replace(/{{open_sensors(\\|[^}]+)?}}/, value);\r\n        let actionConfig = this.config.actions;\r\n        Object.assign(actionConfig, {\r\n            [0]: Object.assign(Object.assign({}, actionConfig[0]), { service: actionConfig[0].service || '', data: Object.assign(Object.assign({}, (actionConfig[0].data || {})), { message: message }) }),\r\n        });\r\n        this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n    }\r\n    _getArmModeFormat(forceResult = false) {\r\n        var _a;\r\n        const message = ((_a = this.config.actions[0].data) === null || _a === void 0 ? void 0 : _a.message) || '';\r\n        const res = message.match(/{{arm_mode(\\|[^}]+)?}}/);\r\n        if (res !== null)\r\n            return res[0];\r\n        else\r\n            return forceResult ? '{{arm_mode}}' : null;\r\n    }\r\n    _setArmModeFormat(ev) {\r\n        var _a;\r\n        ev.stopPropagation();\r\n        const value = String(ev.detail.value);\r\n        let message = ((_a = this.config.actions[0].data) === null || _a === void 0 ? void 0 : _a.message) || '';\r\n        message = message.replace(/{{arm_mode(\\|[^}]+)?}}/, value);\r\n        let actionConfig = this.config.actions;\r\n        Object.assign(actionConfig, {\r\n            [0]: Object.assign(Object.assign({}, actionConfig[0]), { service: actionConfig[0].service || '', data: Object.assign(Object.assign({}, (actionConfig[0].data || {})), { message: message }) }),\r\n        });\r\n        this.config = Object.assign(Object.assign({}, this.config), { actions: actionConfig });\r\n    }\r\n    _saveClick(ev) {\r\n        if (!this._validateConfig())\r\n            return;\r\n        let data = this._parseAutomation();\r\n        //keep modes array empty if all modes are selected\r\n        if (getArmModeOptions(data.triggers[0].area, this.areas).every(e => { var _a; return (_a = data.triggers[0].modes) === null || _a === void 0 ? void 0 : _a.includes(e); })) {\r\n            data = Object.assign(Object.assign({}, data), { triggers: Object.assign(data.triggers, { [0]: Object.assign(Object.assign({}, data.triggers[0]), { modes: [] }) }) });\r\n        }\r\n        if (this.item)\r\n            data = Object.assign(Object.assign({}, data), { automation_id: this.item.automation_id });\r\n        saveAutomation(this.hass, data)\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => this._cancelClick());\r\n    }\r\n    _deleteClick(ev) {\r\n        var _a;\r\n        if (!((_a = this.item) === null || _a === void 0 ? void 0 : _a.automation_id))\r\n            return;\r\n        deleteAutomation(this.hass, this.item.automation_id)\r\n            .catch(e => handleError(e, ev))\r\n            .then(() => this._cancelClick());\r\n    }\r\n    _testClick(ev) {\r\n        const data = this._parseAutomation();\r\n        const action = data.actions[0];\r\n        const [domain, service] = action.service.split('.');\r\n        let message = action.data.message;\r\n        message = message.replace('{{open_sensors|format=short}}', 'Some Example Sensor');\r\n        message = message.replace(/{{open_sensors(\\|[^}]+)?}}/, 'Some Example Sensor is open');\r\n        message = message.replace('{{bypassed_sensors}}', 'Some Bypassed Sensor');\r\n        message = message.replace(/{{arm_mode(\\|[^}]+)?}}/, 'Armed away');\r\n        message = message.replace('{{changed_by}}', 'Some Example User');\r\n        this.hass\r\n            .callService(domain, service, Object.assign(Object.assign({}, action.data), { message: message }))\r\n            .then()\r\n            .catch(e => {\r\n            showErrorDialog(ev, e.message);\r\n            return;\r\n        });\r\n    }\r\n    _cancelClick() {\r\n        navigate(this, exportPath('actions'), true);\r\n    }\r\n    static get styles() {\r\n        return css `\r\n      div.content {\r\n        padding: 28px 20px 0;\r\n        max-width: 1040px;\r\n        margin: 0 auto;\r\n        display: flex;\r\n        flex-direction: column;\r\n      }\r\n      div.header {\r\n        font-size: 24px;\r\n        font-weight: 400;\r\n        letter-spacing: -0.012em;\r\n        line-height: 32px;\r\n        opacity: var(--dark-primary-opacity);\r\n      }\r\n      div.section-header {\r\n        font-size: 18px;\r\n        font-weight: 400;\r\n        letter-spacing: -0.012em;\r\n        line-height: 32px;\r\n        opacity: var(--dark-primary-opacity);\r\n        margin: 20px 0px 5px 10px;\r\n      }\r\n      div.actions {\r\n        padding: 20px 0px 30px 0px;\r\n      }\r\n      mwc-button ha-icon {\r\n        margin-right: 6px;\r\n        --mdc-icon-size: 20px;\r\n      }\r\n      .toggle-button {\r\n        position: absolute;\r\n        right: 20px;\r\n        top: 20px;\r\n      }\r\n      h2 {\r\n        margin-top: 10px;\r\n        font-size: 24px;\r\n        font-weight: 400;\r\n        letter-spacing: -0.012em;\r\n      }\r\n      span.error-message {\r\n        color: var(--error-color);\r\n      }\r\n      mwc-button.warning {\r\n        --mdc-theme-primary: var(--error-color);\r\n      }\r\n      mwc-button.save-button {\r\n        --mdc-theme-primary: rgba(var(--rgb-primary-color), 0.8);\r\n      }\r\n      div.heading {\r\n        display: grid;\r\n        grid-template-areas:\r\n          'header icon'\r\n          'description icon';\r\n        grid-template-rows: 1fr 1fr;\r\n        grid-template-columns: 1fr 48px;\r\n        margin: 20px 0px 10px 10px;\r\n      }\r\n      div.heading .icon {\r\n        grid-area: icon;\r\n      }\r\n      div.heading .header {\r\n        grid-area: header;\r\n      }\r\n      div.heading .description {\r\n        grid-area: description;\r\n      }\r\n      ha-textarea[invalid] {\r\n        --mdc-text-field-idle-line-color: var(--mdc-theme-error);\r\n        --mdc-text-field-label-ink-color: var(--mdc-theme-error);\r\n      }\r\n    `;\r\n    }\r\n};\r\n__decorate([\r\n    property({ attribute: false })\r\n], NotificationEditorCard.prototype, \"hass\", void 0);\r\n__decorate([\r\n    property()\r\n], NotificationEditorCard.prototype, \"narrow\", void 0);\r\n__decorate([\r\n    property()\r\n], NotificationEditorCard.prototype, \"config\", void 0);\r\n__decorate([\r\n    property()\r\n], NotificationEditorCard.prototype, \"item\", void 0);\r\n__decorate([\r\n    property()\r\n], NotificationEditorCard.prototype, \"areas\", void 0);\r\n__decorate([\r\n    property()\r\n], NotificationEditorCard.prototype, \"alarmoConfig\", void 0);\r\n__decorate([\r\n    property()\r\n], NotificationEditorCard.prototype, \"viewMode\", void 0);\r\n__decorate([\r\n    property()\r\n], NotificationEditorCard.prototype, \"errors\", void 0);\r\nNotificationEditorCard = __decorate([\r\n    customElement('notification-editor-card')\r\n], NotificationEditorCard);\r\nexport { NotificationEditorCard };\r\n","references":["/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/lit/decorators.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/custom-card-helpers/dist/index.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/node_modules/@mdi/js/mdi.d.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/types.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/helpers.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/websockets.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/localize/localize.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/data/actions.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/const.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/common/navigation.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/load-ha-elements.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-selector.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-select.ts","/workspaces/RacelandHA/config/custom_components/alarmo/frontend/src/components/alarmo-chip-set.ts"]}
